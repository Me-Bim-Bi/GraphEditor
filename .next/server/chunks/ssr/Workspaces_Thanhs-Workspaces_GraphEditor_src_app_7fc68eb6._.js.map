{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/store/hooks.ts"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\nimport type { AppDispatch, RootState } from './store'\n\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\n"],"names":[],"mappings":";;;;;;AAAA;;AAGO,MAAM,iBAAiB,uWAAW,CAAC,SAAS;AAC5C,MAAM,iBAAiB,uWAAW,CAAC,SAAS","debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/modals/AddNodeModal.tsx"],"sourcesContent":["'use client'\nimport React, { useState, ChangeEvent, useEffect } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport { updateData } from '../../store/features/graphDataSlice'\nimport { Data, Node, Link } from '../../types/dataGraph'\nimport { updateBackward, updateForward } from '../../store/features/actionHistorySlice'\nimport toast, { Toaster } from \"react-hot-toast\";\n\ntype AddNodeModalProps = {\n    isOpen: boolean\n    onClose: () => void\n}\n\nconst AddNodeModal = ({ isOpen, onClose }: AddNodeModalProps) => {\n    const [actionType, setActionType] = useState('')\n    const dispatch = useAppDispatch()\n\n    const graphDataString = useAppSelector(state => state.graphData.value)\n    const graphData: Data = graphDataString\n        ? JSON.parse(graphDataString)\n        : { nodes: [], links: [] }\n\n    // Form state\n    const [nodeId, setNodeId] = useState('')\n    const [nodeLabel, setNodeLabel] = useState('')\n    const [additionalProperties, setAdditionalProperties] = useState('')\n    const [parentID, setParentID] = useState('')\n    const [nodeColor, setNodeColor] = useState('#4edff2')\n\n    const [source, setSource] = useState('')\n    const [target, setTarget] = useState('')\n    const [value, setValue] = useState<number>(1)\n    const [relationship, setRelationship] = useState('')\n    const [color, setEdgeColor] = useState('#929296')\n    const [arrowShape, setArrowShape] = useState('triangle')\n    const hierarchyEnable = useAppSelector(state => state.hierarchyEnable.value)\n\n    // Check duplicate Node ID\n    const [idError, setIdError] = useState('')\n\n    const backwardArray = useAppSelector(state => state.actionHistory.backward)\n    let changeableBackwardArray = structuredClone(backwardArray);\n\n    useEffect(() => {\n        if (nodeId && graphData.nodes.some(n => n.id === nodeId)) {\n            setIdError('Node ID already exists!')\n        } else {\n            setIdError('')\n        }\n    }, [nodeId, graphData.nodes])\n\n    if (!isOpen) return null\n\n    const nodeOptions: Node[] = [...graphData.nodes]\n    // Only add node if it does not exist\n    if (nodeId && nodeLabel && !graphData.nodes.some(n => n.id === nodeId)) {\n        nodeOptions.push({ id: nodeId, label: nodeLabel, parentID: parentID, color: nodeColor })\n    }\n\n    const selectActionType = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        setActionType(e.target.value)\n    }\n\n    const addNode = () => {\n        if (graphDataString === '') {\n                changeableBackwardArray.push(JSON.stringify({ nodes: [], links: [] }));\n            } else {\n                changeableBackwardArray.push(graphDataString);\n            }\n        dispatch(updateBackward(changeableBackwardArray))\n        dispatch(updateForward(new Array() as string[]))\n        if (actionType === 'Add Node' || actionType === 'Add Both') {\n\n            if (!nodeId || !nodeLabel) {\n                toast.error('Node ID and Label are mandatory');\n                return;\n            }\n            if (idError) {\n                toast.error('Cannot add node: ' + idError);\n                return;\n            }\n\n            // Add node\n            const newNode: Node = {\n                id: nodeId,\n                label: nodeLabel,\n                parentID: parentID || undefined,\n                color: nodeColor || '#4edff2'\n            }\n            if (additionalProperties.trim() !== '') {\n                const propsArray = additionalProperties.split(';');\n                newNode['textList'] = propsArray.map(prop => prop.trim());\n            }\n            graphData.nodes.push(newNode)\n\n            if (hierarchyEnable && parentID) {\n                const hasEdge = graphData.links.some(\n                    l => l.source === parentID && l.target === nodeId\n                );\n                if (!hasEdge) {\n                    graphData.links.push({\n                        source: parentID,\n                        target: nodeId,\n                        value: 1,\n                        relationship: 'parent-child',\n                        color: '#929296',\n                        arrowShape: 'triangle'\n                    });\n                }\n            }\n        }\n\n\n        // Add edge\n        if (actionType === 'Add Edge' || actionType === 'Add Both') {\n            if (source && target) {\n                const duplicateEdge = graphData.links.some(\n                    (l) => l.source === source && l.target === target\n                )\n                if (duplicateEdge) {\n                    alert('An edge with the same source and target already exists!')\n                } else {\n                    const newLink: Link = { source, target, value, relationship, color, arrowShape }\n                    graphData.links.push(newLink)\n                }\n            }\n        }\n\n        // Update Redux store\n        dispatch(updateData(JSON.stringify(graphData)))\n\n        // Reset form\n        setNodeId('')\n        setNodeLabel('')\n        setParentID('')\n        setNodeColor('#4edff2')\n        setSource('')\n        setTarget('')\n        setValue(1)\n        setRelationship('')\n        setEdgeColor('#929296')\n        setArrowShape('triangle')\n        setActionType('')\n\n        onClose()\n    }\n\n    const renderAddNode = (actionType: string) => {\n        if (actionType === \"Add Node\" || actionType === \"Add Both\") {\n            return (\n                <>\n                    <div className=\"addNode\">\n                        <h2 className=\"font-semibold mb-2\">Node{\" \"}</h2>\n                        <Toaster position=\"top-right\" />\n                        <div className=\"space-y-3 mb-4\">\n                            <div>\n                                <label className=\"block mb-1 font-medium\">Node ID</label>\n                                <input\n                                    className={`border p-2 w-full rounded ${idError ? 'border-red-500' : 'border-gray-300'}`}\n                                    data-testid=\"Node ID for test add Node\"\n                                    placeholder=\"Enter Node ID\"\n                                    value={nodeId}\n                                    onChange={(e) => setNodeId(e.target.value)}\n                                />\n                                {idError && <p className=\"text-red-500 text-sm mt-1\">{idError}</p>}\n                            </div>\n\n                            <div>\n                                <label className=\"block mb-1 font-medium\">Label</label>\n                                <input\n                                    className=\"border p-2 w-full rounded\"\n                                    data-testid=\"Node label for test add Node\"\n                                    placeholder=\"Enter node label\"\n                                    value={nodeLabel}\n                                    onChange={(e) => setNodeLabel(e.target.value)}\n                                />\n                            </div>\n\n                            <div>\n                                <label className=\"block mb-1 font-medium\">Parent ID {\" \"}\n                                    <span className=\"text-red-500\">(if not root - mandatory with hierarchy layout)</span>\n                                </label>\n                                <select\n                                    className=\"border p-2 w-full rounded\"\n                                    data-testid=\"Node parentID for test add Node\"\n                                    value={parentID}\n                                    onChange={(e) => setParentID(e.target.value)}\n                                >\n                                    <option value=\"\">No parent</option>\n                                    {graphData.nodes\n                                        .slice() \n                                        .sort((a, b) => {\n                                            const labelA = a.label ? a.label.toLowerCase() : a.id.toLowerCase();\n                                            const labelB = b.label ? b.label.toLowerCase() : b.id.toLowerCase();\n                                            return labelA.localeCompare(labelB);\n                                        })\n                                        .map((n) => (\n                                            <option key={n.id} value={n.id}>\n                                                {n.label || n.id}\n                                            </option>\n                                    ))}\n                                </select>\n                            </div>\n\n                            <div>\n                                <label className=\"block mb-1 font-medium\">Additional properties</label>\n                                <input\n                                    data-testid=\"Additional properties\"\n                                    className=\"border p-2 w-full rounded\"\n                                    placeholder=\"Enter additional properties, separate by ;  e.g., age:30;city:NY\"\n                                    value={additionalProperties}\n                                    onChange={(e) => setAdditionalProperties(e.target.value)}\n                                />\n                            </div>\n\n                            {/* Color */}\n                            <div className=\"mb-3 flex items-center gap-2\">\n                                <label className=\"text-sm\">Color:</label>\n                                <input\n                                    type=\"color\"\n                                    data-testid=\"Node color\"\n                                    value={nodeColor}\n                                    onChange={(e) => setNodeColor(e.target.value)}\n                                />\n                            </div>\n\n                        </div>\n                    </div>\n                </>\n            )\n        } else {\n            return (\n                <></>\n            )\n        }\n    }\n\n    const renderAddEdge = (actionType: string) => {\n        if (actionType === \"Add Edge\" || actionType === \"Add Both\") {\n            return (\n                <div className=\"addEdge\">\n                    <h2 className=\"font-semibold mb-2 \">Edge{\" \"}</h2>\n                    <div className=\"space-y-3 mb-4 \">\n                        <div>\n                            <label className=\"block mb-1 font-medium\">Source Node</label>\n                            <select\n                                data-testid=\"Source node test add edge\"\n                                className=\"border p-2 w-full rounded\"\n                                value={source}\n                                onChange={(e) => setSource(e.target.value)}\n                            >\n                                <option value=\"\">Select Source</option>\n                                {nodeOptions\n                                    .slice() \n                                    .sort((a, b) => {\n                                        const labelA = a.label ? a.label.toLowerCase() : a.id.toLowerCase();\n                                        const labelB = b.label ? b.label.toLowerCase() : b.id.toLowerCase();\n                                        return labelA.localeCompare(labelB);\n                                    })\n                                    .map((n) => (\n                                        <option key={n.id} value={n.id}>\n                                            {n.label ? `${n.label} (id: ${n.id})` : n.id}\n                                        </option>\n                                    ))}\n                            </select>\n                        </div>\n\n                        <div>\n                            <label className=\"block mb-1 font-medium\">Target Node</label>\n                            <select\n                                data-testid=\"Target node test add edge\"\n                                className=\"border p-2 w-full rounded\"\n                                value={target}\n                                onChange={(e) => setTarget(e.target.value)}\n                            >\n                                <option value=\"\">Select Target</option>\n                                {nodeOptions\n                                    .slice() \n                                    .sort((a, b) => {\n                                        const labelA = a.label ? a.label.toLowerCase() : a.id.toLowerCase();\n                                        const labelB = b.label ? b.label.toLowerCase() : b.id.toLowerCase();\n                                        return labelA.localeCompare(labelB);\n                                    })\n                                    .map((n) => (\n                                        <option key={n.id} value={n.id}>\n                                            {n.label ? `${n.label} (id: ${n.id})` : n.id}\n                                        </option>\n                                    ))}\n                            </select>\n                        </div>\n\n                        <div>\n                            <label className=\"block mb-1 font-medium\">Edge Value</label>\n                            <input\n                                type=\"number\"\n                                data-testid=\"Edge value test add edge\"\n                                className=\"border p-2 w-full rounded\"\n                                placeholder=\"Enter value\"\n                                value={value}\n                                onChange={(e) => setValue(Number(e.target.value))}\n                            />\n                        </div>\n\n                        <div>\n                            <label className=\"block mb-1 font-medium\">Relationship</label>\n                            <input\n                                type=\"string\"\n                                data-testid=\"Relationship test add edge\"\n                                className=\"border p-2 w-full rounded\"\n                                placeholder=\"Enter relationship\"\n                                value={relationship}\n                                onChange={(e) => setRelationship(e.target.value)}\n                            />\n                        </div>\n\n                    </div>\n\n                    {/* Color */}\n                    <div className=\"mb-3 flex items-center gap-2\">\n                        <label className=\"text-sm\">Color:</label>\n                        <input\n                            type=\"color\"\n                            data-testid=\"Color test add edge\"\n                            value={color}\n                            onChange={e => setEdgeColor(e.target.value)}\n                        />\n                    </div>\n\n                    {/* Arrow shape */}\n                    <div className=\"mb-3 flex items-center gap-2\">\n                        <label className=\"text-sm\">Arrow:</label>\n                        <select\n                            data-testid=\"Arrow shape test add edge\"\n                            className=\"border rounded p-1 text-sm\"\n                            value={arrowShape}\n                            onChange={e => setArrowShape(e.target.value)}\n                        >\n                            <option value=\"triangle\">Triangle</option>\n                            <option value=\"diamond\">Diamond</option>\n                            <option value=\"circle\">Circle</option>\n                            <option value=\"vee\">Vee</option>\n                            <option value=\"none\">None</option>\n                        </select>\n                    </div>\n\n                </div>\n            )\n        } else {\n            return (\n                <></>\n            )\n        }\n    }\n\n    return (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center overflow-auto z-50\">\n            <div className=\"modal-container bg-white p-6 rounded-lg w-[500px] shadow-lg\">\n                <h1 className=\"text-lg font-bold mb-4\">Add Node</h1>\n                <div>\n                    <label className=\"block mb-1 font-medium\">Select action type {\" \"}\n                    </label>\n                    <select\n                        data-testid=\"action-type-select\"\n                        className=\"border p-2 w-full rounded\"\n                        value={actionType}\n                        onChange={(e) => selectActionType(e)}\n                    >\n                        <option value=\"\">No Action Type</option>\n                        <option key=\"addNode\" value=\"Add Node\">Add node</option>\n                        {!hierarchyEnable && (\n                            <>\n                                <option key=\"addEdge\" value=\"Add Edge\">Add edge</option>\n                                <option key=\"addBoth\" value=\"Add Both\">Add node + edge</option>\n                            </>\n                        )}\n                    </select>\n                </div>\n                <br></br>\n\n                {renderAddNode(actionType)}\n                {renderAddEdge(actionType)}\n                {/* Buttons */}\n                <div className=\"flex gap-2 justify-end\">\n                    <button\n                        className={`bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 ${idError ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        onClick={addNode}\n                        disabled={!!idError}\n                    >\n                        Add\n                    </button>\n                    <button\n                        className=\"bg-gray-300 py-2 px-4 rounded hover:bg-gray-400\"\n                        onClick={onClose}\n                    >\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddNodeModal\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AAEA;AACA;AANA;;;;;;;AAaA,MAAM,eAAe,CAAC,EAAE,MAAM,EAAE,OAAO,EAAqB;IACxD,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,uaAAQ,EAAC;IAC7C,MAAM,WAAW,IAAA,mMAAc;IAE/B,MAAM,kBAAkB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,SAAS,CAAC,KAAK;IACrE,MAAM,YAAkB,kBAClB,KAAK,KAAK,CAAC,mBACX;QAAE,OAAO,EAAE;QAAE,OAAO,EAAE;IAAC;IAE7B,aAAa;IACb,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,uaAAQ,EAAC;IACrC,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,uaAAQ,EAAC;IAC3C,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,IAAA,uaAAQ,EAAC;IACjE,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,uaAAQ,EAAC;IACzC,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,uaAAQ,EAAC;IAE3C,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,uaAAQ,EAAC;IACrC,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,uaAAQ,EAAC;IACrC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,uaAAQ,EAAS;IAC3C,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,uaAAQ,EAAC;IACjD,MAAM,CAAC,OAAO,aAAa,GAAG,IAAA,uaAAQ,EAAC;IACvC,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,uaAAQ,EAAC;IAC7C,MAAM,kBAAkB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,eAAe,CAAC,KAAK;IAE3E,0BAA0B;IAC1B,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,uaAAQ,EAAC;IAEvC,MAAM,gBAAgB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,QAAQ;IAC1E,IAAI,0BAA0B,gBAAgB;IAE9C,IAAA,waAAS,EAAC;QACN,IAAI,UAAU,UAAU,KAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS;YACtD,WAAW;QACf,OAAO;YACH,WAAW;QACf;IACJ,GAAG;QAAC;QAAQ,UAAU,KAAK;KAAC;IAE5B,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,cAAsB;WAAI,UAAU,KAAK;KAAC;IAChD,qCAAqC;IACrC,IAAI,UAAU,aAAa,CAAC,UAAU,KAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS;QACpE,YAAY,IAAI,CAAC;YAAE,IAAI;YAAQ,OAAO;YAAW,UAAU;YAAU,OAAO;QAAU;IAC1F;IAEA,MAAM,mBAAmB,CAAC;QACtB,cAAc,EAAE,MAAM,CAAC,KAAK;IAChC;IAEA,MAAM,UAAU;QACZ,IAAI,oBAAoB,IAAI;YACpB,wBAAwB,IAAI,CAAC,KAAK,SAAS,CAAC;gBAAE,OAAO,EAAE;gBAAE,OAAO,EAAE;YAAC;QACvE,OAAO;YACH,wBAAwB,IAAI,CAAC;QACjC;QACJ,SAAS,IAAA,4NAAc,EAAC;QACxB,SAAS,IAAA,2NAAa,EAAC,IAAI;QAC3B,IAAI,eAAe,cAAc,eAAe,YAAY;YAExD,IAAI,CAAC,UAAU,CAAC,WAAW;gBACvB,sWAAK,CAAC,KAAK,CAAC;gBACZ;YACJ;YACA,IAAI,SAAS;gBACT,sWAAK,CAAC,KAAK,CAAC,sBAAsB;gBAClC;YACJ;YAEA,WAAW;YACX,MAAM,UAAgB;gBAClB,IAAI;gBACJ,OAAO;gBACP,UAAU,YAAY;gBACtB,OAAO,aAAa;YACxB;YACA,IAAI,qBAAqB,IAAI,OAAO,IAAI;gBACpC,MAAM,aAAa,qBAAqB,KAAK,CAAC;gBAC9C,OAAO,CAAC,WAAW,GAAG,WAAW,GAAG,CAAC,CAAA,OAAQ,KAAK,IAAI;YAC1D;YACA,UAAU,KAAK,CAAC,IAAI,CAAC;YAErB,IAAI,mBAAmB,UAAU;gBAC7B,MAAM,UAAU,UAAU,KAAK,CAAC,IAAI,CAChC,CAAA,IAAK,EAAE,MAAM,KAAK,YAAY,EAAE,MAAM,KAAK;gBAE/C,IAAI,CAAC,SAAS;oBACV,UAAU,KAAK,CAAC,IAAI,CAAC;wBACjB,QAAQ;wBACR,QAAQ;wBACR,OAAO;wBACP,cAAc;wBACd,OAAO;wBACP,YAAY;oBAChB;gBACJ;YACJ;QACJ;QAGA,WAAW;QACX,IAAI,eAAe,cAAc,eAAe,YAAY;YACxD,IAAI,UAAU,QAAQ;gBAClB,MAAM,gBAAgB,UAAU,KAAK,CAAC,IAAI,CACtC,CAAC,IAAM,EAAE,MAAM,KAAK,UAAU,EAAE,MAAM,KAAK;gBAE/C,IAAI,eAAe;oBACf,MAAM;gBACV,OAAO;oBACH,MAAM,UAAgB;wBAAE;wBAAQ;wBAAQ;wBAAO;wBAAc;wBAAO;oBAAW;oBAC/E,UAAU,KAAK,CAAC,IAAI,CAAC;gBACzB;YACJ;QACJ;QAEA,qBAAqB;QACrB,SAAS,IAAA,oNAAU,EAAC,KAAK,SAAS,CAAC;QAEnC,aAAa;QACb,UAAU;QACV,aAAa;QACb,YAAY;QACZ,aAAa;QACb,UAAU;QACV,UAAU;QACV,SAAS;QACT,gBAAgB;QAChB,aAAa;QACb,cAAc;QACd,cAAc;QAEd;IACJ;IAEA,MAAM,gBAAgB,CAAC;QACnB,IAAI,eAAe,cAAc,eAAe,YAAY;YACxD,qBACI;0BACI,cAAA,ocAAC;oBAAI,WAAU;;sCACX,ocAAC;4BAAG,WAAU;;gCAAqB;gCAAK;;;;;;;sCACxC,ocAAC,sWAAO;4BAAC,UAAS;;;;;;sCAClB,ocAAC;4BAAI,WAAU;;8CACX,ocAAC;;sDACG,ocAAC;4CAAM,WAAU;sDAAyB;;;;;;sDAC1C,ocAAC;4CACG,WAAW,CAAC,0BAA0B,EAAE,UAAU,mBAAmB,mBAAmB;4CACxF,eAAY;4CACZ,aAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,UAAU,EAAE,MAAM,CAAC,KAAK;;;;;;wCAE5C,yBAAW,ocAAC;4CAAE,WAAU;sDAA6B;;;;;;;;;;;;8CAG1D,ocAAC;;sDACG,ocAAC;4CAAM,WAAU;sDAAyB;;;;;;sDAC1C,ocAAC;4CACG,WAAU;4CACV,eAAY;4CACZ,aAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;8CAIpD,ocAAC;;sDACG,ocAAC;4CAAM,WAAU;;gDAAyB;gDAAW;8DACjD,ocAAC;oDAAK,WAAU;8DAAe;;;;;;;;;;;;sDAEnC,ocAAC;4CACG,WAAU;4CACV,eAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;;8DAE3C,ocAAC;oDAAO,OAAM;8DAAG;;;;;;gDAChB,UAAU,KAAK,CACX,KAAK,GACL,IAAI,CAAC,CAAC,GAAG;oDACN,MAAM,SAAS,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,EAAE,CAAC,WAAW;oDACjE,MAAM,SAAS,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,EAAE,CAAC,WAAW;oDACjE,OAAO,OAAO,aAAa,CAAC;gDAChC,GACC,GAAG,CAAC,CAAC,kBACF,ocAAC;wDAAkB,OAAO,EAAE,EAAE;kEACzB,EAAE,KAAK,IAAI,EAAE,EAAE;uDADP,EAAE,EAAE;;;;;;;;;;;;;;;;;8CAOjC,ocAAC;;sDACG,ocAAC;4CAAM,WAAU;sDAAyB;;;;;;sDAC1C,ocAAC;4CACG,eAAY;4CACZ,WAAU;4CACV,aAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,wBAAwB,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;8CAK/D,ocAAC;oCAAI,WAAU;;sDACX,ocAAC;4CAAM,WAAU;sDAAU;;;;;;sDAC3B,ocAAC;4CACG,MAAK;4CACL,eAAY;4CACZ,OAAO;4CACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;QAQxE,OAAO;YACH,qBACI;QAER;IACJ;IAEA,MAAM,gBAAgB,CAAC;QACnB,IAAI,eAAe,cAAc,eAAe,YAAY;YACxD,qBACI,ocAAC;gBAAI,WAAU;;kCACX,ocAAC;wBAAG,WAAU;;4BAAsB;4BAAK;;;;;;;kCACzC,ocAAC;wBAAI,WAAU;;0CACX,ocAAC;;kDACG,ocAAC;wCAAM,WAAU;kDAAyB;;;;;;kDAC1C,ocAAC;wCACG,eAAY;wCACZ,WAAU;wCACV,OAAO;wCACP,UAAU,CAAC,IAAM,UAAU,EAAE,MAAM,CAAC,KAAK;;0DAEzC,ocAAC;gDAAO,OAAM;0DAAG;;;;;;4CAChB,YACI,KAAK,GACL,IAAI,CAAC,CAAC,GAAG;gDACN,MAAM,SAAS,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,EAAE,CAAC,WAAW;gDACjE,MAAM,SAAS,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,EAAE,CAAC,WAAW;gDACjE,OAAO,OAAO,aAAa,CAAC;4CAChC,GACC,GAAG,CAAC,CAAC,kBACF,ocAAC;oDAAkB,OAAO,EAAE,EAAE;8DACzB,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE;mDADnC,EAAE,EAAE;;;;;;;;;;;;;;;;;0CAOjC,ocAAC;;kDACG,ocAAC;wCAAM,WAAU;kDAAyB;;;;;;kDAC1C,ocAAC;wCACG,eAAY;wCACZ,WAAU;wCACV,OAAO;wCACP,UAAU,CAAC,IAAM,UAAU,EAAE,MAAM,CAAC,KAAK;;0DAEzC,ocAAC;gDAAO,OAAM;0DAAG;;;;;;4CAChB,YACI,KAAK,GACL,IAAI,CAAC,CAAC,GAAG;gDACN,MAAM,SAAS,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,EAAE,CAAC,WAAW;gDACjE,MAAM,SAAS,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,WAAW,KAAK,EAAE,EAAE,CAAC,WAAW;gDACjE,OAAO,OAAO,aAAa,CAAC;4CAChC,GACC,GAAG,CAAC,CAAC,kBACF,ocAAC;oDAAkB,OAAO,EAAE,EAAE;8DACzB,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE;mDADnC,EAAE,EAAE;;;;;;;;;;;;;;;;;0CAOjC,ocAAC;;kDACG,ocAAC;wCAAM,WAAU;kDAAyB;;;;;;kDAC1C,ocAAC;wCACG,MAAK;wCACL,eAAY;wCACZ,WAAU;wCACV,aAAY;wCACZ,OAAO;wCACP,UAAU,CAAC,IAAM,SAAS,OAAO,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;0CAIvD,ocAAC;;kDACG,ocAAC;wCAAM,WAAU;kDAAyB;;;;;;kDAC1C,ocAAC;wCACG,MAAK;wCACL,eAAY;wCACZ,WAAU;wCACV,aAAY;wCACZ,OAAO;wCACP,UAAU,CAAC,IAAM,gBAAgB,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;;;;;;;kCAO3D,ocAAC;wBAAI,WAAU;;0CACX,ocAAC;gCAAM,WAAU;0CAAU;;;;;;0CAC3B,ocAAC;gCACG,MAAK;gCACL,eAAY;gCACZ,OAAO;gCACP,UAAU,CAAA,IAAK,aAAa,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;kCAKlD,ocAAC;wBAAI,WAAU;;0CACX,ocAAC;gCAAM,WAAU;0CAAU;;;;;;0CAC3B,ocAAC;gCACG,eAAY;gCACZ,WAAU;gCACV,OAAO;gCACP,UAAU,CAAA,IAAK,cAAc,EAAE,MAAM,CAAC,KAAK;;kDAE3C,ocAAC;wCAAO,OAAM;kDAAW;;;;;;kDACzB,ocAAC;wCAAO,OAAM;kDAAU;;;;;;kDACxB,ocAAC;wCAAO,OAAM;kDAAS;;;;;;kDACvB,ocAAC;wCAAO,OAAM;kDAAM;;;;;;kDACpB,ocAAC;wCAAO,OAAM;kDAAO;;;;;;;;;;;;;;;;;;;;;;;;QAMzC,OAAO;YACH,qBACI;QAER;IACJ;IAEA,qBACI,ocAAC;QAAI,WAAU;kBACX,cAAA,ocAAC;YAAI,WAAU;;8BACX,ocAAC;oBAAG,WAAU;8BAAyB;;;;;;8BACvC,ocAAC;;sCACG,ocAAC;4BAAM,WAAU;;gCAAyB;gCAAoB;;;;;;;sCAE9D,ocAAC;4BACG,eAAY;4BACZ,WAAU;4BACV,OAAO;4BACP,UAAU,CAAC,IAAM,iBAAiB;;8CAElC,ocAAC;oCAAO,OAAM;8CAAG;;;;;;8CACjB,ocAAC;oCAAqB,OAAM;8CAAW;mCAA3B;;;;;gCACX,CAAC,iCACE;;sDACI,ocAAC;4CAAqB,OAAM;sDAAW;2CAA3B;;;;;sDACZ,ocAAC;4CAAqB,OAAM;sDAAW;2CAA3B;;;;;;;;;;;;;;;;;;;8BAK5B,ocAAC;;;;;gBAEA,cAAc;gBACd,cAAc;8BAEf,ocAAC;oBAAI,WAAU;;sCACX,ocAAC;4BACG,WAAW,CAAC,2DAA2D,EAAE,UAAU,kCAAkC,IAAI;4BACzH,SAAS;4BACT,UAAU,CAAC,CAAC;sCACf;;;;;;sCAGD,ocAAC;4BACG,WAAU;4BACV,SAAS;sCACZ;;;;;;;;;;;;;;;;;;;;;;;AAOrB;uCAEe","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/modals/EditNodeModal.tsx"],"sourcesContent":["'use client'\nimport React, { useState, useEffect, ChangeEvent } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport { updateData } from '../../store/features/graphDataSlice'\nimport { Data } from '../../types/dataGraph'\nimport { updateBackward, updateForward } from '../../store/features/actionHistorySlice'\nimport toast, { Toaster } from \"react-hot-toast\";\n\ntype EditNodeModalProps = {\n    isOpen: boolean,\n    nodeId: string,\n    onClose: () => void\n}\n\nconst EditNodeModal = ({ isOpen, nodeId, onClose }: EditNodeModalProps) => {\n    const dispatch = useAppDispatch()\n    const graphDataString = useAppSelector(state => state.graphData.value)\n    const graphData: Data = graphDataString\n        ? JSON.parse(graphDataString)\n        : { nodes: [], links: [] }\n\n    const backwardArray = useAppSelector(state => state.actionHistory.backward)\n    let changeableBackwardArray = structuredClone(backwardArray);\n\n\n    const [actionType, setActionType] = useState('')\n\n    // Form state object\n    const [formData, setFormData] = useState({\n        label: '',\n        parentID: '',\n        color: '#4edff2',\n        textInput: '',\n    })\n\n    const selectActionType = (e: ChangeEvent<HTMLInputElement>) => {\n        setActionType(e.target.value)\n    }\n\n    // Fill form when selected node changes\n    useEffect(() => {\n        const currentGraphData: Data = graphDataString\n            ? JSON.parse(graphDataString)\n            : { nodes: [], links: [] }\n        const node = currentGraphData.nodes.find(n => n.id === nodeId)\n        if (node) {\n            setFormData({\n                label: node.label || '',\n                parentID: node.parentID || '',\n                color: node.color || '#4edff2',\n                textInput: node.textList ? node.textList.join('; ') : '',\n            })\n        }\n    }, [graphDataString, nodeId])\n\n\n    if (!isOpen) return null\n\n    const handleRemove = () => {\n        changeableBackwardArray.push(graphDataString);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward([]));\n        const nodeMap = new Map(graphData.nodes.map(n => [n.id, { ...n }]));\n\n        // If \"parent\" was be deleted, the childrens will be adopted by ...grandparent\n        graphData.nodes.forEach(node => {\n            if (node.parentID && nodeId === node.parentID) {\n                const oldParent = nodeMap.get(node.parentID);\n                node.parentID = oldParent?.parentID || undefined; // If this node does not have parent, parent becomes undefined\n            }\n        });\n\n        // Remove nodes\n        const remainingNodes = graphData.nodes.filter(n => n.id !== nodeId);\n\n        // Remove edges that have relationship with the node\n        const remainingLinks = graphData.links.filter(\n            l => l.source !== nodeId && l.target !== nodeId\n        )\n\n        const updatedData: Data = {\n            nodes: remainingNodes,\n            links: remainingLinks,\n        }\n\n        dispatch(updateData(JSON.stringify(updatedData)))\n\n        onClose()\n\n    }\n    const handleSave = () => {\n        changeableBackwardArray.push(graphDataString);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward([]));\n        \n        const nodeIndex = graphData.nodes.findIndex((n) => n.id === nodeId)\n        if (nodeIndex === -1) {\n            toast.error('Selected node not found!')\n            return\n        }\n        if (!formData.label.trim()) {\n            toast.error('Label can not be empty.')\n            return\n        }\n        // Update node\n        graphData.nodes[nodeIndex] = {\n            ...graphData.nodes[nodeIndex],\n            label: formData.label,\n            parentID: formData.parentID || undefined,\n            color: formData.color,\n            textList: formData.textInput ? formData.textInput.split(';').map(item => item.trim()) : undefined,\n        }\n\n        dispatch(updateData(JSON.stringify(graphData)))\n        onClose()\n    }\n\n    return (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <div className=\"modal-container bg-white p-6 rounded-lg w-[500px] shadow-lg\">\n                <h1 className=\"text-lg font-bold mb-4\">Edit Node</h1>\n\n                {/* Node fields */}\n                <div className=\"space-y-3 mb-4\">\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Node ID (cannot edit)</label>\n                        <input\n                            className=\"border p-2 w-full rounded bg-gray-200 cursor-not-allowed\"\n                            value={nodeId}\n                            disabled\n                        />\n                    </div>\n\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Label</label>\n                        <input\n                            className=\"border p-2 w-full rounded\"\n                            data-testid=\"edit-node-label\"\n                            value={formData.label}\n                            onChange={(e) =>\n                                setFormData({ ...formData, label: e.target.value })\n                            }\n                        />\n                        {!formData.label.trim() && (\n                            <p className=\"text-red-500 text-sm\">Label is required</p>\n                        )}\n                        </div>\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Parent ID {\" \"}\n                            <span className=\"text-red-500\">(mandatory with hierarchy layout)</span>\n                        </label>\n                        <select\n                            className=\"border p-2 w-full rounded\"\n                            data-testid=\"edit-node-parent-ID\"\n                            value={formData.parentID}\n                            onChange={(e) =>\n                                setFormData({ ...formData, parentID: e.target.value })\n                            }\n                        >\n                            <option value=\"\">No parent</option>\n                            {graphData.nodes\n                                .filter((n) => n.id !== nodeId)\n                                .slice() \n                                    .sort((a, b) => {\n                                        const labelA = a.label ? a.label.toLowerCase() : a.id.toLowerCase();\n                                        const labelB = b.label ? b.label.toLowerCase() : b.id.toLowerCase();\n                                        return labelA.localeCompare(labelB);\n                                    })\n                                .map((n) => (\n                                    <option key={n.id} value={n.id}>\n                                        {n.label || n.id}\n                                    </option>\n                                ))}\n                        </select>\n                    </div>\n\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Additional Properties (Split by ;)</label>\n                        <input\n                            className=\"border p-2 w-full rounded\"\n                            data-testid=\"edit-node-textbox\"\n                            value={formData.textInput}\n                            onChange={(e) =>\n                                setFormData({ ...formData, textInput: e.target.value })\n                            }\n                        />\n                    </div>\n\n\n                    {/* Color */}\n                    <div className=\"mb-3 flex items-center gap-2\">\n                        <label className=\"text-sm\">Color:</label>\n                        <input\n                            data-testid=\"edit-node-color\"\n                            type=\"color\"\n                            value={formData.color}\n                            onChange={e => setFormData({ ...formData, color: e.target.value })}\n                        />\n                    </div>\n                </div>\n\n                {/* Buttons */}\n                <div className=\"flex gap-2 justify-end\">\n                    <button\n                        className=\"bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700\"\n                        onClick={handleRemove}\n                    >\n                        Remove\n                    </button>\n                    <button\n                        className={`py-2 px-4 rounded bg-blue-600 text-white hover:bg-blue-700 ${!formData.label.trim() ? 'opacity-50 cursor-not-allowed' : ''}`}\n                        onClick={handleSave}\n                        disabled={!formData.label.trim()}\n                    >\n                        Save\n                    </button>\n                    <button\n                        className=\"bg-gray-300 py-2 px-4 rounded hover:bg-gray-400\"\n                        onClick={onClose}\n                    >\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EditNodeModal\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1169, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/modals/EditEdgeModal.tsx"],"sourcesContent":["'use client'\nimport React, { useState, useEffect } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../store/hooks'\nimport { updateData } from '../../store/features/graphDataSlice'\nimport { Data, Node } from '../../types/dataGraph'\nimport { updateBackward, updateForward } from '../../store/features/actionHistorySlice'\nimport toast, { Toaster } from \"react-hot-toast\";\n\ntype EditEdgeModalProps = {\n    isOpen: boolean,\n    edgeId: string,\n    onClose: () => void\n}\n\nconst EditEdgeModal = ({ isOpen, edgeId, onClose }: EditEdgeModalProps) => {\n    //console.log(\"edgeID:\", edgeId)\n    const dispatch = useAppDispatch()\n    const graphDataString = useAppSelector(state => state.graphData.value)\n    const graphData: Data = graphDataString ? JSON.parse(graphDataString) : { nodes: [], links: [] }\n\n    const [formData, setFormData] = useState({ source: '', target: '', value: 1, relationship: '', color: '#929296', arrowShape: 'triangle' })\n    const [error, setError] = useState('')\n    const [source, setSource] = useState('')\n    const [target, setTarget] = useState('')\n\n    const backwardArray = useAppSelector(state => state.actionHistory.backward)\n    let changeableBackwardArray = structuredClone(backwardArray);\n\n    // Filter edges associated with selected node\n    useEffect(() => {\n        if (graphDataString && edgeId) {\n            let edgeInfos = edgeId.split(\"-\");\n            let edgeSource = edgeInfos[2];\n            let edgeTarget = edgeInfos[3];\n            let edgeIndex = graphData.links.findIndex(link => link.source === edgeSource && link.target == edgeTarget);\n            if (edgeIndex === -1) return;\n            const edgeData = graphData.links[edgeIndex];\n            const edgeValue = edgeData.value ?? 1;\n            const edgeRelationship = edgeData.relationship ?? '';\n            const edgeColor = edgeData.color ?? '#929296';\n            const edgeArrowShape = edgeData.arrowShape ?? 'triangle';\n            setSource(edgeSource)\n            setTarget(edgeTarget)\n            setFormData({\n                source: edgeSource,\n                target: edgeTarget,\n                value: edgeValue,\n                relationship: edgeRelationship,\n                color: edgeColor,\n                arrowShape: edgeArrowShape\n            })\n            setError('')\n        }\n\n    }, [graphDataString, edgeId])\n\n    if (!isOpen) return null\n\n    const handleRemove = () => {\n        changeableBackwardArray.push(graphDataString);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward(new Array()))\n\n        let edgeIndex = graphData.links.findIndex(link => link.source === source && link.target == target);\n        toast.success('Remove node successful');\n        let changeableDataArray = structuredClone(graphData);\n        changeableDataArray.links.splice(edgeIndex, 1);\n        dispatch(updateData(JSON.stringify(changeableDataArray)));\n\n        onClose();\n    }\n\n    const handleSave = () => {\n        changeableBackwardArray.push(graphDataString);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward(new Array()))\n        \n        let edgeIndex = graphData.links.findIndex(\n            link => link.source === source && link.target == target\n        );\n        if (edgeIndex === -1) return;\n\n        let changeableDataArray = structuredClone(graphData);\n\n        // Update all editable fields\n        changeableDataArray.links[edgeIndex].value = formData.value;\n        changeableDataArray.links[edgeIndex].relationship = formData.relationship;\n        changeableDataArray.links[edgeIndex].color = formData.color;\n        changeableDataArray.links[edgeIndex].arrowShape = formData.arrowShape;\n\n        dispatch(updateData(JSON.stringify(changeableDataArray)));\n        onClose();\n    }\n\n\n    return (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <div className=\"modal-container bg-white p-6 rounded-lg w-[500px] shadow-lg\">\n                <h1 className=\"text-lg font-bold mb-4\">Edit Edge</h1>\n\n                {/* Edge editing form */}\n                <div className=\"space-y-3 mb-4\">\n\n                    {/* Source */}\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Source</label>\n                        <input\n                            className=\"border p-2 w-full rounded bg-gray-200 cursor-not-allowed\"\n                            data-testid=\"edit-edge-source\"\n                            value={source}\n                            disabled\n                        />\n                    </div>\n\n                    {/* Target */}\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Target</label>\n                        <input\n                            className=\"border p-2 w-full rounded bg-gray-200 cursor-not-allowed\"\n                            data-testid=\"edit-edge-target\"\n                            value={target}\n                            disabled\n                        />\n                    </div>\n\n                    {/* Value */}\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Value</label>\n                        <input\n                            data-testid=\"edit-edge-value\"\n                            type=\"number\"\n                            className=\"border p-2 w-full rounded\"\n                            value={formData.value}\n                            onChange={(e) =>\n                                setFormData({ ...formData, value: Number(e.target.value) })\n                            }\n                        />\n                    </div>\n\n                    {/* Relationship */}\n                    <div>\n                        <label className=\"block mb-1 font-medium\">Relationship</label>\n                        <input\n                            className=\"border p-2 w-full rounded\"\n                            data-testid=\"edit-edge-relationship\"\n                            value={formData.relationship}\n                            onChange={(e) =>\n                                setFormData({ ...formData, relationship: e.target.value })\n                            }\n                        />\n                    </div>\n\n                    {/* Color */}\n                    <div className=\"mb-3 flex items-center gap-2\">\n                        <label className=\"text-sm\">Color:</label>\n                        <input\n                            data-testid=\"edit-edge-color\"\n                            type=\"color\"\n                            value={formData.color}\n                            onChange={e => setFormData({ ...formData, color: e.target.value })}\n                        />\n                    </div>\n\n                    {/* Arrow shape */}\n                    <div className=\"mb-3 flex items-center gap-2\">\n                        <label className=\"text-sm\">Arrow:</label>\n                        <select\n                            className=\"border rounded p-1 text-sm\"\n                            data-testid=\"edit-edge-arrow\"\n                            value={formData.arrowShape}\n                            onChange={e => setFormData({ ...formData, arrowShape: e.target.value })}\n                        >\n                            <option value=\"triangle\">Triangle</option>\n                            <option value=\"diamond\">Diamond</option>\n                            <option value=\"circle\">Circle</option>\n                            <option value=\"vee\">Vee</option>\n                            <option value=\"none\">None</option>\n                        </select>\n                    </div>\n\n                    {error && <p className=\"text-red-500 text-sm\">{error}</p>}\n                </div>\n\n                <div className=\"flex gap-2 justify-end\">\n                    <button\n                        className=\"bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700\"\n                        onClick={handleRemove}\n                    >\n                        Remove\n                    </button>\n                    <button\n                        className=\"bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700\"\n                        onClick={handleSave}\n                    >\n                        Save\n                    </button>\n                    <button\n                        className=\"bg-gray-300 py-2 px-4 rounded hover:bg-gray-400\"\n                        onClick={onClose}\n                    >\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EditEdgeModal\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1559, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/modals/AnalysisModal.tsx"],"sourcesContent":["'use client'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../store/store'\nimport { AnalysisData } from '../../types/analysisData'\n\ntype AnalysisModalProps = {\n    isOpen: boolean,\n    onClose: () => void\n}\n\nconst AnalysisModal = ({ isOpen, onClose }: AnalysisModalProps) => {\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const graphData = data ? JSON.parse(data) : { nodes: [], links: [] };\n    let analysisData = graphData.nodes || [];\n    if (!isOpen) return null\n    return (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <div className=\"modal-container bg-white p-6 rounded-lg w-[500px] shadow-lg max-h-[80vh] overflow-y-auto\">\n                <h1 className=\"text-lg font-bold mb-4\">Analysis result</h1>\n                <div>\n                    <table className=\"min-w-full mt-4 border\">\n                        <thead>\n                            <tr className=\"bg-gray-200\">\n                                <th className=\"px-4 py-2\">#</th>\n                                <th className=\"px-4 py-2\">Node</th>\n                                <th className=\"px-4 py-2\">Value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {analysisData.map((n: AnalysisData, i: number) => (\n                                <tr key={n.id}>\n                                    <td className=\"px-4 py-2 text-center\">{i + 1}</td>\n                                    <td className=\"px-4 py-2\">{n.label}</td>\n                                    <td className=\"px-4 py-2 text-right\">{n.value}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                    <button\n                        className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                        onClick={onClose}\n                    >\n                        Close\n                    </button>\n                </div>\n            </div>\n        </ div>\n    )\n}\n\nexport default AnalysisModal\n"],"names":[],"mappings":";;;;;AACA;AADA;;;AAUA,MAAM,gBAAgB,CAAC,EAAE,MAAM,EAAE,OAAO,EAAsB;IAC1D,MAAM,OAAO,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,SAAS,CAAC,KAAK;IACpE,MAAM,YAAY,OAAO,KAAK,KAAK,CAAC,QAAQ;QAAE,OAAO,EAAE;QAAE,OAAO,EAAE;IAAC;IACnE,IAAI,eAAe,UAAU,KAAK,IAAI,EAAE;IACxC,IAAI,CAAC,QAAQ,OAAO;IACpB,qBACI,ocAAC;QAAI,WAAU;kBACX,cAAA,ocAAC;YAAI,WAAU;;8BACX,ocAAC;oBAAG,WAAU;8BAAyB;;;;;;8BACvC,ocAAC;8BACG,cAAA,ocAAC;wBAAM,WAAU;;0CACb,ocAAC;0CACG,cAAA,ocAAC;oCAAG,WAAU;;sDACV,ocAAC;4CAAG,WAAU;sDAAY;;;;;;sDAC1B,ocAAC;4CAAG,WAAU;sDAAY;;;;;;sDAC1B,ocAAC;4CAAG,WAAU;sDAAY;;;;;;;;;;;;;;;;;0CAGlC,ocAAC;0CACI,aAAa,GAAG,CAAC,CAAC,GAAiB,kBAChC,ocAAC;;0DACG,ocAAC;gDAAG,WAAU;0DAAyB,IAAI;;;;;;0DAC3C,ocAAC;gDAAG,WAAU;0DAAa,EAAE,KAAK;;;;;;0DAClC,ocAAC;gDAAG,WAAU;0DAAwB,EAAE,KAAK;;;;;;;uCAHxC,EAAE,EAAE;;;;;;;;;;;;;;;;;;;;;8BAS7B,ocAAC;8BACG,cAAA,ocAAC;wBACG,WAAU;wBACV,SAAS;kCACZ;;;;;;;;;;;;;;;;;;;;;;AAOrB;uCAEe","debugId":null}},
    {"offset": {"line": 1713, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/graph.tsx"],"sourcesContent":["'use client'\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport cytoscape from 'cytoscape';\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store/store';\nimport { useAppDispatch } from '../store/hooks';\nimport { updateHierarchyEnable } from '../store/features/hierarchyEnableSlice';\nimport { updateAnalysisModalOpen } from '../store/features/buttonsEnableSlice';\nimport { Data } from '../types/dataGraph';\nimport AddNodeModal from './modals/AddNodeModal';\nimport EditNodeModal from './modals/EditNodeModal';\nimport EditEdgeModal from './modals/EditEdgeModal';\nimport AnalysisModal from './modals/AnalysisModal';\n\n\ntype MyGraphProps = {\n    width?: number;\n    height?: number;\n    type: string; // \"h\" = hierarchy, otherwise force-directed\n    onCyReadyAction?: (cy: cytoscape.Core) => void\n}\ntype Action = {\n    name: string;\n    modal: React.ReactNode;\n    enabled: boolean;\n    onClick: () => void;\n};\n\nexport const MyGraph = ({ width, height, type, onCyReadyAction }: MyGraphProps) => {\n    const [openModals, setOpenModals] = useState({\n        addNode: false,\n        addEdge: false,\n        removeNode: false,\n        removeEdge: false,\n        editNode: false,\n        editEdge: false,\n    });\n    const [nodeId, setNodeId] = useState('')\n    const [edgeId, setEdgeId] = useState('')\n    const [nodeCount, setNodeCount] = useState(0)\n    const [edgeCount, setEdgeCount] = useState(0)\n    const data = useSelector((state: RootState) => state.graphData.value)\n    const dispatch = useAppDispatch()\n\n    const containerRef = useRef<HTMLDivElement>(null)\n    const cyRef = useRef<cytoscape.Core | null>(null)\n\n    const buttonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n    const hierarchyEnable = useSelector((state: RootState) => state.hierarchyEnable.value);\n    const analysisIsOpen = useSelector((state: RootState) => state.buttonEnable.analysisModalOpen);\n    const nodeFilter = useSelector((state: RootState) => state.nodeFilter.value);\n\n    const [searchQuery, setSearchQuery] = useState('')\n    const [searchResults, setSearchResults] = useState<Node[] | null>(null)\n    \n\n\n    useEffect(() => {\n        dispatch(updateHierarchyEnable(type === 'h'))\n    }, [type, dispatch])\n\n\n    const handleEmptyGraph = () => {\n        if (data === \"\") {\n            setOpenModals({ ...openModals, addNode: true })\n        }\n    }\n    \n    //autosave\n    useEffect(() => {\n        if (!data) return;\n\n        const interval = setInterval(async () => {\n            try {\n                const parsed: Data = JSON.parse(data)\n                const response = await fetch('/api/import-graph', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(parsed),\n                });\n\n                if(!response.ok){\n                    const errText = await response.text();\n                    throw new Error(`Server responded with ${response.status}: ${errText}`);\n                    }\n\n                //const result = await response.text();\n                toast.success(\"Autosave to database successful\", { duration: 1500 });\n            } catch (err) {\n                toast.error(\"Autosave failed, cannot connect to Neo4j or invalid response\");\n                console.error(\"Auto save failed\", err);\n            }\n            }, 30000);\n\n            return () => clearInterval(interval);\n    }, [data]);\n\n    useEffect(() => {\n        if (!cyRef.current) return\n\n        const cy = cyRef.current\n\n        cy.elements().removeClass('highlight')\n\n        const graphData: Data = data ? JSON.parse(data) : { nodes: [], links: [] }\n        const graphDataSet = new Set(graphData.nodes.map(n => n.label))\n        const filterSet = new Set(nodeFilter)\n        const filteredName = graphDataSet.intersection(filterSet)\n        const filteredNodes = graphData.nodes.filter(n => filteredName.has(n.label))\n        filteredNodes.forEach(n => {\n            const ele = cy.$id(n.id)\n            if (ele.nonempty()) ele.addClass('highlight')\n        })\n        filteredNodes.forEach((sourceNode)=>{\n            filteredNodes.forEach((targetNode) => {\n                if(sourceNode.id === targetNode.id) return;\n                const edge = cy.$(`edge[source = \"${sourceNode.id}\"][target = \"${targetNode.id}\"]`);\n                if(edge.nonempty()) edge.addClass('highlight');\n            })\n        })\n    }, [nodeFilter]);\n\n\n    \n    useEffect(() => {\n        if (!containerRef.current || !data) return\n\n        // Destroy old Cytoscape instance\n        if (cyRef.current) {\n            cyRef.current.destroy()\n            cyRef.current = null\n        }\n\n        const ro = new ResizeObserver(() => {\n            if (cyRef.current) {\n                cyRef.current.resize();\n                cyRef.current.fit();\n            }\n        });\n\n        ro.observe(containerRef.current);\n\n        const dataGraph: Data = JSON.parse(data)\n\n        const values = dataGraph.nodes.map(n => n.value || 0);\n        const minValue = Math.min(...values);\n        const maxValue = Math.max(...values);\n\n        const minSize = 30;\n        const maxSize = 100;\n\n        const getNodeSize = (value?: number) => {\n            if (value === undefined || isNaN(value)) return minSize;\n            if (maxValue === minValue) return (minSize + maxSize) / 2; \n            const normalized = (value - minValue) / (maxValue - minValue);\n            return minSize + normalized * (maxSize - minSize);\n        };\n\n        const getColor = (baseHex: string, value?: number) => {\n            const hex = baseHex.replace('#', '');\n            const r = (parseInt(hex, 16) >> 16) & 255;\n            const g = (parseInt(hex, 16) >> 8) & 255;\n            const b = parseInt(hex, 16) & 255;\n\n            if (value === undefined || maxValue === minValue) {\n                return `rgb(${r},${g},${b})`;\n            }\n\n            const normalized = (value - minValue) / (maxValue - minValue);\n\n            const lightFactor = 0.5; \n            const factor = lightFactor + (1-lightFactor) * (normalized);\n\n            const clamp = (val: number) => Math.max(0, Math.min(255, val));\n\n            const newR = clamp(Math.round(r * factor));\n            const newG = clamp(Math.round(g * factor));\n            const newB = clamp(Math.round(b * factor));\n\n            return `rgb(${newR},${newG},${newB})`;\n        };\n\n\n\n        const cyNodes = dataGraph.nodes.map(n => {\n            const color = getColor(n?.color || '#4edff2', n?.value);\n            const size = getNodeSize(n.value);\n\n            return {\n                data: {\n                    id: n.id,\n                    label: n.label,\n                    labelId: `${n.label} (id: ${n.id})`,\n                    color,\n                    width: size,\n                    height: size,\n                },\n            };\n        });\n\n        // Build edges\n        let cyEdges: any[] = []\n        if (type === 'h') {\n            const nodes = dataGraph.nodes || [];\n            const links = dataGraph.links || [];\n\n            if (nodes.length === 0) {\n                toast(\"Canvas is empty. You can start adding nodes freely.\");\n                cyEdges = [];\n            } else {\n                const rootNodes = nodes.filter(n => !n.parentID);\n                const nodeIds = nodes.map(n => n.id);\n\n                if (rootNodes.length === 0) {\n                    toast.error(\n                        \"No root node found! Please set one node as 'No parent' (parentID = null) before rendering hierarchy.\",\n                        {\n                            duration: 8000,\n                            style: {\n                                background: '#ff4d4f',\n                                color: '#fff',\n                                fontWeight: 'bold',\n                                fontSize: '16px',\n                                padding: '16px',\n                                borderRadius: '8px',\n                            },\n                        }\n                    );\n                    return;\n                }\n                cyEdges = nodes\n                    .filter(n => n.parentID)\n                    .map(n => {\n                        if(!nodeIds.includes(n.parentID)){\n                            toast.error(`Node \"${n.label}\" has invalid parentID \"${n.parentID}\"! \n                                This edge will not be created.`,\n                        { duration: 8000 })\n                        return null;\n                        }\n                        \n                        const existingEdge = links.find(\n                            l => l.source === n.parentID && l.target === n.id\n                        );\n                        return {\n                            data: {\n                                id: `e-${n.parentID}-${n.id}`,\n                                source: n.parentID!,\n                                target: n.id,\n                                value: existingEdge?.value || 1,\n                                label: existingEdge?.relationship\n                                    ? `${existingEdge.relationship} (${existingEdge.value ?? ''})`\n                                    : existingEdge?.value?.toString() || 'parent-child',\n                                color: existingEdge?.color || '#999',\n                                arrowShape: existingEdge?.arrowShape || 'triangle',\n                            },\n                        };\n                    });\n            }\n\n        } else {\n            // force: use normal links. \n            cyEdges = dataGraph.links.map((l, idx) => ({\n                data: {\n                    id: `e-${idx}-${l.source}-${l.target}`,\n                    source: l.source,\n                    target: l.target,\n                    value: l?.value || 1,\n                    label: l?.relationship\n                        ? `${l.relationship} (${l.value ?? ''})`\n                        : l?.value?.toString() || '',\n                    color: l.color || '#999',\n                    arrowShape: l.arrowShape || 'triangle',\n                },\n            }))\n        }\n\n        const elements = [...cyNodes, ...cyEdges]\n        setNodeCount(cyNodes.length)\n        setEdgeCount(cyEdges.length)\n        // Cytoscape init\n        const cy = cytoscape({\n            container: containerRef.current,\n            elements,\n            style: [\n                {\n                    selector: 'node',\n                    style: {\n                        label: 'data(labelId)',\n                        'background-color': 'data(color)',\n                        'border-color': '#ffffff',\n                        'border-width': 1,\n                        color: '#123456',\n                        'text-valign': 'center',\n                        'text-halign': 'center',\n                        'font-size': 12,\n                        'width': (ele) => ele.data('width') || 40,\n                        'height': (ele) => ele.data('height') || 40,\n                    },\n                },\n                {\n                    selector: 'edge',\n                    style: {\n                        width: 2,\n                        'line-color': 'data(color)',\n                        'target-arrow-color': 'data(color)',\n                        'target-arrow-shape': (ele) => ele.data('arrowShape') || 'triangle',\n                        'curve-style': 'bezier',\n                        label: 'data(label)',\n                        'font-size': 10,\n                        'color': '#555',\n                        'text-rotation': 'autorotate',\n                        'text-background-opacity': 0.8,\n                        'text-background-color': '#fff',\n                        'text-background-shape': 'roundrectangle',\n                        'text-valign': 'center',\n                        'text-halign': 'center',\n                        'text-margin-x': 0,\n                        'text-margin-y': 0,\n                    },\n                },\n                {\n                    selector: 'node.highlight',\n                    style: {\n                        'background-color': 'green',\n                        'border-color': 'red',\n                        'border-width': 3,\n                        'transition-property': 'background-color, border-color',\n                        'transition-duration': 0.5,\n                    },\n                },\n                {\n                    selector: 'edge.highlight',\n                    style: {\n                        'line-color': 'red',\n                        'target-arrow-color': 'red',\n                        'width': 4,\n                        'transition-property': 'line-color, target-arrow-color, width',\n                        'transition-duration': 0.5,\n                    },\n                },\n            ],\n            layout:\n                type === 'h'\n                    ? {\n                        name: 'breadthfirst', // hierarchy layout\n                        directed: true,\n                        padding: 10,\n                        spacingFactor: 1.5,\n                        animate: true,\n                    }\n                    : {\n                        name: 'cose', // force-directed layout\n                        animate: true,\n                    },\n            wheelSensitivity: 0.2,\n            userZoomingEnabled: true,\n            userPanningEnabled: true,\n        })\n\n        cy.on('tap', 'node', function (event) {\n            const node = event.target;\n            setNodeId(node._private.data.id)\n            setOpenModals(prev => ({ ...prev, editNode: true }))\n        });\n        cy.on('tap', 'edge', function (event) {\n            const edge = event.target;\n            setEdgeId(edge._private.data.id)\n            if (!hierarchyEnable) {\n                setOpenModals(prev => ({ ...prev, editEdge: true }))\n            }\n        });\n        cy.on('tap', function (event) {\n            const evtTarget = event.target;\n            if (evtTarget === cy) {\n                setOpenModals(prev => ({ ...prev, addNode: true }))\n            }\n        });\n\n        // Enable drag of nodes (only for force layout)\n        if (type !== 'h') {\n            cy.nodes().grabify() // allow grabbing\n        } else {\n            cy.nodes().ungrabify() // disable dragging in hierarchy\n        }\n\n        cyRef.current = cy\n        \n        if (onCyReadyAction) onCyReadyAction(cy)\n\n        return () => {\n            cy.destroy()\n            cyRef.current = null\n            ro.disconnect();\n        }\n    }, [data, width, height, type])\n\n    const actions: Action[] = [\n        {\n            name: 'Add node/edge',\n            modal: <AddNodeModal isOpen={openModals.addNode} onClose={() => setOpenModals(prev => ({ ...prev, addNode: false }))} />,\n            enabled: buttonEnable,\n            onClick: () => setOpenModals(prev => ({ ...prev, addNode: true })),\n        },\n        {\n            name: 'Edit node',\n            modal: <EditNodeModal isOpen={openModals.editNode} nodeId={nodeId} onClose={() => setOpenModals(prev => ({ ...prev, editNode: false }))} />,\n            enabled: buttonEnable,\n            onClick: () => setOpenModals({ ...openModals, editNode: true }),\n        },\n        {\n            name: 'Edit edge',\n            modal: <EditEdgeModal isOpen={openModals.editEdge} edgeId={edgeId} onClose={() => setOpenModals(prev => ({ ...prev, editEdge: false }))} />,\n            enabled: buttonEnable,\n            onClick: () => setOpenModals({ ...openModals, editEdge: true }),\n        },\n        {\n            name: 'Analysis result',\n            modal: <AnalysisModal isOpen={analysisIsOpen} onClose={() => dispatch(updateAnalysisModalOpen(false))} />,\n            enabled: false,\n            onClick: () => {\n                dispatch(updateAnalysisModalOpen(false));\n            },\n        }\n    ];\n    \n    // Handle node search\n    const handleSearch = () => {\n        if (!cyRef.current) return;\n        const cy = cyRef.current;\n\n        cy.elements().removeClass('highlight');\n\n        const value = searchQuery.trim();\n        if (!value) {\n            setSearchResults(null);\n            return;\n        }\n\n        const graphData: Data = data ? JSON.parse(data) : { nodes: [], links: [] };\n        const filtered = graphData.nodes.filter(n =>\n            n.label.toLowerCase().includes(value.toLowerCase()) || n.id.toLowerCase().includes(value.toLowerCase()) \n        );\n\n        setSearchResults(filtered.length > 0 ? filtered : []);\n\n        filtered.forEach(n => {\n            const ele = cy.$id(n.id);\n            if (ele.nonempty()) ele.addClass('highlight');\n        });\n\n        if (filtered.length > 0) {\n            cy.animate({\n                center: { eles: cy.$id(filtered[0].id) },\n                zoom: 1.1,\n                duration: 800\n            });\n        }\n    };\n\n    if (!type) return <div className=\"w-full h-full flex items-center justify-center text-gray-500\">You need to choose the layout first</div>\n\n    return (\n        <div className=\"relative w-full h-full\">\n            <Toaster position=\"top-right\" />\n            <div className=\"absolute top-4 right-4 z-50 bg-white border rounded px-3 py-1 shadow-sm text-sm\">\n                Nodes: {nodeCount} | Edges: {edgeCount}\n            </div>\n\n            {/* Search Input */}\n            <div className=\"absolute top-4 left-4 z-50 w-64\">\n                <div className=\"flex\">\n                    <input\n                    type=\"text\"\n                    placeholder=\"Search node...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"py-2 px-3 w-full border rounded-l shadow-sm\"\n                    />\n                    <button\n                    onClick={() => handleSearch()}\n                    className=\"p-2 bg-blue-600 text-white rounded-r hover:bg-blue-700 flex items-center justify-center\"\n                    >\n                    🔍\n                    </button>\n                </div>\n\n                {searchResults && searchResults.length === 0 && (\n                    <div className=\"text-red-500 text-sm mt-1\">Node not found</div>\n                )}\n            </div>\n            {/* Actions modals */}\n            {actions.map((action) => (\n                <React.Fragment key={action.name}>{action.modal}</React.Fragment>\n            ))}\n\n            {/* Graph container */}\n            <div\n                onClick={handleEmptyGraph}\n                ref={containerRef}\n                className=\"w-full h-full \"\n            />\n        </div>\n    )\n}\n\nexport default MyGraph\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2294, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/Nav.tsx"],"sourcesContent":["'use client'\nconst Nav = () => {\n    const mystyle = {\n        border: \"white\",\n        borderStyle: \"solid\",\n        borderWidth: \"thin\",\n    };\n    return <>\n        <nav className=\"relative bg-gray-800\">\n            <div className=\"mx-auto max-w-7xl px-2 sm:px-6 lg:px-8\">\n                <div className=\"relative flex h-16 items-center justify-between\">\n                    <div className=\"absolute inset-y-0 left-0 flex items-center sm:hidden\">\n                        <button type=\"button\" command=\"--toggle\" commandfor=\"mobile-menu\" className=\"relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-white/5 hover:text-white focus:outline-2 focus:-outline-offset-1 focus:outline-indigo-500\">\n                            <span className=\"absolute -inset-0.5\"></span>\n                            <span className=\"sr-only\">Open main menu</span>\n                            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" data-slot=\"icon\" aria-hidden=\"true\" className=\"size-6 in-aria-expanded:hidden\">\n                                <path d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                            </svg>\n                            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" data-slot=\"icon\" aria-hidden=\"true\" className=\"size-6 not-in-aria-expanded:hidden\">\n                                <path d=\"M6 18 18 6M6 6l12 12\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                            </svg>\n                        </button>\n                    </div>\n                    <div className=\"flex flex-1 items-center justify-center sm:items-stretch sm:justify-start\">\n                        <div className=\"flex shrink-0 items-center\">\n                            <img src=\"https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=500\" alt=\"Your Company\" className=\"h-8 w-auto\" />\n                        </div>\n                        <div className=\"hidden sm:ml-6 sm:block\">\n                            <div className=\"flex space-x-4\">\n                                <a href=\"#\" aria-current=\"page\" className=\"rounded-md bg-gray-900 px-3 py-2 text-sm font-medium text-white\">Home</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0\">\n                    </div>\n                </div>\n            </div>\n\n        </nav>\n    </>\n}\n\nexport default Nav;"],"names":[],"mappings":";;;;;AAAA;;AACA,MAAM,MAAM;IACR,MAAM,UAAU;QACZ,QAAQ;QACR,aAAa;QACb,aAAa;IACjB;IACA,qBAAO;kBACH,cAAA,ocAAC;YAAI,WAAU;sBACX,cAAA,ocAAC;gBAAI,WAAU;0BACX,cAAA,ocAAC;oBAAI,WAAU;;sCACX,ocAAC;4BAAI,WAAU;sCACX,cAAA,ocAAC;gCAAO,MAAK;gCAAS,SAAQ;gCAAW,YAAW;gCAAc,WAAU;;kDACxE,ocAAC;wCAAK,WAAU;;;;;;kDAChB,ocAAC;wCAAK,WAAU;kDAAU;;;;;;kDAC1B,ocAAC;wCAAI,SAAQ;wCAAY,MAAK;wCAAO,QAAO;wCAAe,aAAY;wCAAM,aAAU;wCAAO,eAAY;wCAAO,WAAU;kDACvH,cAAA,ocAAC;4CAAK,GAAE;4CAA+C,eAAc;4CAAQ,gBAAe;;;;;;;;;;;kDAEhG,ocAAC;wCAAI,SAAQ;wCAAY,MAAK;wCAAO,QAAO;wCAAe,aAAY;wCAAM,aAAU;wCAAO,eAAY;wCAAO,WAAU;kDACvH,cAAA,ocAAC;4CAAK,GAAE;4CAAuB,eAAc;4CAAQ,gBAAe;;;;;;;;;;;;;;;;;;;;;;sCAIhF,ocAAC;4BAAI,WAAU;;8CACX,ocAAC;oCAAI,WAAU;8CACX,cAAA,ocAAC;wCAAI,KAAI;wCAAgF,KAAI;wCAAe,WAAU;;;;;;;;;;;8CAE1H,ocAAC;oCAAI,WAAU;8CACX,cAAA,ocAAC;wCAAI,WAAU;kDACX,cAAA,ocAAC;4CAAE,MAAK;4CAAI,gBAAa;4CAAO,WAAU;sDAAkE;;;;;;;;;;;;;;;;;;;;;;sCAIxH,ocAAC;4BAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;;AAOnC;uCAEe","debugId":null}},
    {"offset": {"line": 2472, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/buttons/ImportButton.tsx"],"sourcesContent":["'use client'\nimport React, { useRef, ChangeEvent, useState, useEffect } from 'react'\nimport { updateData } from '../../store/features/graphDataSlice';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks'\nimport { Data, Link } from '../../types/dataGraph'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../store/store'\nimport toast from \"react-hot-toast\";\nimport { updateForward, updateBackward } from '../../store/features/actionHistorySlice';\n\n\ntype ImportButtonProps = {\n    isButtonEnable: boolean;\n    setIsReadyToGraph: (arg: boolean) => void;\n}\n\nconst ImportButton = ({ isButtonEnable, setIsReadyToGraph }: ImportButtonProps) => {\n    const data = useSelector((state: RootState) => state.graphData.value);\n    \n    const [uploadError, setUploadError] = useState('')\n    const uploadRef = useRef<HTMLInputElement>(null)\n    const dispatch = useAppDispatch()\n    const hierarchyEnable = useSelector((state: RootState) => state.hierarchyEnable.value);\n    const backwardArray = useAppSelector(state => state.actionHistory.backward);\n    let changeableBackwardArray = structuredClone(backwardArray);\n\n    useEffect(() => {\n    if (data !== '') {\n        const dataGraph: Data = JSON.parse(data)\n        if (dataGraph.nodes.length !== 0) {\n            setIsReadyToGraph(true);\n        } else {\n            setIsReadyToGraph(false);\n        }\n    }\n    }, [data]);\n\n    const handleUpload = (e: ChangeEvent<HTMLInputElement>) => {\n        if (!e.target.files?.[0]) return\n        \n        const file = e.target.files[0]\n        const reader = new FileReader()\n\n        reader.onload = (event) => {\n            try {\n                const contents = event?.target?.result as string\n\n                const parsed: Data = JSON.parse(contents)\n\n                // Validate nodes\n                if (!parsed.nodes || !Array.isArray(parsed.nodes)) {\n                    throw new Error('Invalid data: \"nodes\" must be an array')\n                }\n                parsed.nodes.forEach(n => {\n                    if (!n.id) throw new Error('Each node must have an \"id\"')\n                    if (!n.label) throw new Error('Each node must have an \"label\"')\n                })\n\n                // Validate links\n                if (!parsed.links || !Array.isArray(parsed.links) && !hierarchyEnable) {\n                    parsed.links = []\n                }\n\n                const nodeIds = parsed.nodes.map(n => n.id)\n                type ArrowShape = '' | 'triangle' | 'circle' | 'diamond' | 'vee' | 'none';\n                const validArrowShapes: ArrowShape[] = ['triangle', 'circle', 'diamond', 'vee', 'none'];\n\n                if (hierarchyEnable) {\n                    const nodeIds = parsed.nodes.map((n) => n.id);\n                    const rootNodes = parsed.nodes.filter(n => n.parentID === null || n.parentID === undefined || n.parentID === \"null\");\n\n                    if (rootNodes.length === 0) {\n                        toast.error(\n                            \"No root node found! Please set one node as 'No parent' (parentID = null) before rendering hierarchy.\",\n                            {\n                                duration: 5000,\n                                style: {\n                                    background: '#ff4d4f',\n                                    color: '#fff',\n                                    fontWeight: 'bold',\n                                    fontSize: '16px',\n                                    padding: '16px',\n                                    borderRadius: '8px',\n                                },\n                            }\n                        );\n                        setUploadError('Hierarchy file must contain at least one root node (parentID = null)');\n                        setTimeout(() => setUploadError(''), 5000); \n                        setIsReadyToGraph(false);\n                        return;\n                    }\n                    parsed.nodes.forEach((n) => {\n                        if (n.parentID && !nodeIds.includes(n.parentID)) {\n                            throw new Error(`ParentID \"${n.parentID}\" does not exist for node \"${n.id}\"`);\n                            }\n                        if (n.parentID) {\n                            parsed.links.push({\n                                target: n.id,\n                                source: n.parentID,\n                                relationship: 'parent-child',\n                                arrowShape: 'none',\n                            } as Link);\n                            } else if (n.parentID && !nodeIds.includes(n.parentID)) {\n                            console.warn(`Skipping link: parentID \"${n.parentID}\" not found for node \"${n.id}\"`);\n                            }\n                    });\n                } else {\n                    parsed.links.forEach(l => {\n                        if (!l.source || !l.target) throw new Error('Each link must have source and target')\n                        if (!nodeIds.includes(l.source as string)) throw new Error(`Link source \"${l.source}\" does not exist`)\n                        if (!nodeIds.includes(l.target as string)) throw new Error(`Link target \"${l.target}\" does not exist`)\n                        //if the arrow shape does not exist => trianglel. \n                        const shape: ArrowShape = (l.arrowShape as ArrowShape) || 'triangle';\n                        if (!validArrowShapes.includes(shape)) {\n                            throw new Error(`Link arrow shape \"${l.arrowShape}\" does not exist`);\n                        }\n                    })\n                }\n\n                //console.log('original data:', data)\n                if (data === ''){\n                    changeableBackwardArray.push(JSON.stringify({ nodes: [], links: [] }));\n                }else{\n                    changeableBackwardArray.push(data);\n                }\n                dispatch(updateBackward(changeableBackwardArray));\n                dispatch(updateForward([]));\n                dispatch(updateData(JSON.stringify(parsed)))\n                setUploadError('')\n                setIsReadyToGraph(true)\n                toast.success(\"File imported successfully\", { duration: 3000 })\n            } catch (err: any) {\n                console.error('Import failed', err)\n                toast.error('Import failed', err?.message ?? 'Invalid file or not a valid JSON graph')\n                setUploadError(err?.message ?? 'File is invalid or not JSON')\n                setTimeout(() => setUploadError(''), 5000); \n                setIsReadyToGraph(false)\n            } finally {\n                e.target.value = ''\n        }\n    }\n        reader.readAsText(file)\n    }\n\n    return (\n        <>\n            <button\n                data-testid=\"test-import-button\"\n                type=\"button\"\n                disabled={!isButtonEnable}\n                className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\"\n                onClick={() => uploadRef.current?.click()}\n            >\n                Import file\n            </button>\n\n            <input\n                data-testid=\"test-import-file\"\n                type=\"file\"\n                ref={uploadRef}\n                onChange={handleUpload}\n                style={{ display: 'none' }}\n            />\n\n            {uploadError && <p className=\"text-red-500 mt-2\">{uploadError}</p>}\n        </>\n    )\n}\n\nexport default ImportButton\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2658, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/buttons/ExportButton.tsx"],"sourcesContent":["'use client'\nimport React, { useState } from 'react'\nimport { useAppSelector } from '../../store/hooks'\nimport { selectGraphData } from '../../store/features/graphDataSlice'\nimport type cytoscape from 'cytoscape'\nimport toast, { Toaster } from \"react-hot-toast\";\n\n\ntype ExportButtonProps = {\n    isButtonEnable: boolean\n    isReadyToGraph: boolean\n    cy: cytoscape.Core | null\n}\n\nconst ExportButton = ({ isButtonEnable, isReadyToGraph, cy }: ExportButtonProps) => {\nconst json_data = useAppSelector(selectGraphData)\nconst [showModal, setShowModal] = useState(false)\nconst [fileName, setFileName] = useState('export')\nconst [format, setFormat] = useState<'json' |'graphml'| 'png'>('json')\nconst [savedFiles, setSavedFiles] = useState<string[]>([])\n\nlet parsedData: any\nif (typeof json_data === 'string' && json_data.trim() !== '') {\n    try {\n        parsedData = JSON.parse(json_data)\n    } catch (e) {\n        console.error(\"Invalid JSON string:\", e);\n        parsedData = {}; \n    }\n} else if (json_data) {\n    parsedData = json_data\n} else {\n    parsedData = {}\n}\n\nconst handleExport = () => {\n    let baseName = fileName.trim() === '' ? 'export' : fileName.trim()\n    let finalName = baseName\n    let counter = 1\n\n    //avoid double name\n    while (savedFiles.includes(`${finalName}.${format}`)) {\n        finalName = `${baseName}(${counter})`\n        counter++\n    }\n\n    const fullFileName = `${finalName}.${format}`\n\n    const nodes = parsedData.nodes || [];\n    const edges = parsedData.links || [];\n\n    if (nodes.length === 0 && edges.length === 0) {\n        toast.error(`Cannot export ${format.toUpperCase()} because the graph is empty.`);\n        return;\n    }\n\n    if (format === 'json') {\n        const data = new Blob([JSON.stringify(parsedData, null, 2)], { type: \"application/json\" });\n        const jsonURL = window.URL.createObjectURL(data);\n        const link = document.createElement(\"a\");\n        link.href = jsonURL;\n        link.setAttribute(\"download\", fileName);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    if (format == 'graphml'){\n        let xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\">\\n`\n        xml += `  <graph id=\"G\" edgedefault=\"directed\">\\n`\n\n        // Export nodes\n        for (const n of nodes) {\n            const id = n.id\n            const label = n.label || id\n            xml += `    <node id=\"${id}\">\\n`\n            xml += `      <data key=\"label\">${label}</data>\\n`\n            if (n.color) xml += `      <data key=\"color\">${n.color}</data>\\n`\n            if (n.parentID) xml += `      <data key=\"parentID\">${n.parentID}</data>\\n`\n            xml += `    </node>\\n`\n        }\n\n        // Export edges\n        for (const e of edges) {\n            const id = `${e.source}-${e.target}`  \n            const source = typeof e.source === 'string' ? e.source : e.source.id\n            const target = typeof e.target === 'string' ? e.target : e.target.id\n            const label = e.relationship || ''\n            const value = e.value || 1\n            xml += `    <edge id=\"${id}\" source=\"${source}\" target=\"${target}\">\\n`\n            xml += `      <data key=\"label\">${label}</data>\\n`\n            xml += `      <data key=\"value\">${value}</data>\\n`\n            if (e.color) xml += `      <data key=\"color\">${e.color}</data>\\n`\n            if (e.arrowShape) xml += `      <data key=\"arrowShape\">${e.arrowShape}</data>\\n`\n            xml += `    </edge>\\n`\n        }\n\n\n        xml += `  </graph>\\n</graphml>`\n\n        const blob = new Blob([xml], { type: \"application/xml\" })\n        const link = document.createElement(\"a\")\n        link.href = URL.createObjectURL(blob)\n        link.download = fullFileName\n        link.click()\n    }\n\n    if (format === 'png') {\n        if(!cy){\n            toast.error(`Cannot export ${format.toUpperCase()} because the graph is empty.`);\n            return;\n        }\n        const pngData = cy.png({\n            full: true,\n            scale: 3,\n            bg: 'white' \n        })\n        const link = document.createElement('a')\n        link.href = pngData\n        link.download = fullFileName\n        link.click()\n    }\n}\n\nreturn (\n    <>\n    <button\n        type=\"button\"\n        disabled={!isButtonEnable || !isReadyToGraph}\n        className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\"\n        onClick={() => setShowModal(true)}\n    >\n        Export File\n    </button>\n\n    {showModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\n        <div className=\"bg-white rounded-2xl shadow-lg p-6 w-80\">\n            <h2 className=\"text-lg font-semibold mb-4 text-center\"\n                data-testid=\"export-button\"\n            >Export File</h2>\n                \n            <div className=\"mb-3\">\n            <label className=\"block text-sm font-medium mb-1\">File name:</label>\n            <input\n                type=\"text\"\n                \n                value={fileName}\n                onChange={(e) => setFileName(e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2 text-sm focus:ring focus:ring-blue-300\"\n                placeholder=\"Please insert file name (default: export)\"\n            />\n            </div>\n\n            <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-1\">File format:</label>\n            <select\n                data-testid=\"export-file-format\"\n                value={format}\n                onChange={(e) => setFormat(e.target.value as 'json' | 'png' | 'graphml')}\n                className=\"w-full border rounded-lg px-3 py-2 text-sm focus:ring focus:ring-blue-300\"\n            >\n                <option value=\"json\">JSON (.json)</option>\n                <option value=\"png\">PNG (.png)</option>\n                <option value=\"graphml\">GraphML (.graphml)</option>\n            </select>\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n            <button\n                onClick={() => setShowModal(false)}\n                className=\"px-4 py-2 text-sm font-medium rounded-lg bg-gray-200 hover:bg-gray-300\"\n            >\n                Cancel\n            </button>\n            <button\n                onClick={() => {handleExport(); setShowModal(false);}}\n                className=\"px-4 py-2 text-sm font-medium rounded-lg bg-blue-600 text-white hover:bg-blue-700\"\n            >\n                Save\n            </button>\n            </div>\n        </div>\n        </div>\n    )}\n    </>\n)\n}\n\nexport default ExportButton"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2933, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/sidebar/AnalysisAction.tsx"],"sourcesContent":["import { updateAnalysisModalOpen } from '../../store/features/buttonsEnableSlice';\nimport { RootState } from '../../store/store';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { updateForward, updateBackward } from '../../store/features/actionHistorySlice';\nimport { useSelector } from 'react-redux'\nimport { updateData } from '../../store/features/graphDataSlice';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Data } from '../..//types/dataGraph'\n\nexport default function AnalysisAction() {\n    const [selectedAnalysis, setSelectedAnalysis] = useState('');\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const backwardArray = useAppSelector(state => state.actionHistory.backward);\n    let changeableBackwardArray = structuredClone(backwardArray);\n    const [hasResult, setHasResult] = useState(false);\n    const dispatch = useAppDispatch();\n    const isButtonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n\n    useEffect(() => {\n        if (data !== '') {\n            const dataGraph: Data = JSON.parse(data)\n            if (dataGraph.nodes.length !== 0) {\n                setIsReadyToGraph(true);\n            } else {\n                setIsReadyToGraph(false);\n            }\n        }\n    }, [data]);\n    const handleAnalysis = async () => {\n        if (!selectedAnalysis) {\n            toast.error('You need to select an analysis type before you click on \"Analysis\"');\n            return;\n        }\n        changeableBackwardArray.push(data);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward([]));\n        const parsed: Data = JSON.parse(data)\n\n        // save graph to database (in case user have not done it yet)\n        await fetch('/api/import-graph', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(parsed),\n        });\n\n        const response = await fetch('/api/analysis', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ type: selectedAnalysis }),\n        });\n\n        const analysisData = await response.json();\n        if (!analysisData?.result) {\n            console.warn(\"No records returned from analysis.\");\n            return;\n        }\n        let graphDataObject = JSON.parse(data);\n        // Update state graph\n        dispatch(updateData(JSON.stringify({ nodes: analysisData.result, links: graphDataObject.links })));\n        setHasResult(true);\n    }\n\n    const showAnalysisModal = () => {\n        if (!selectedAnalysis) {\n            toast.error('You need to select an analysis type before you click on \"Show analysis result\"');\n            return;\n        }\n        dispatch(updateAnalysisModalOpen(true));\n    }\n    return (\n        <>\n            <div className=\"max-w-xs flex gap-x-2\">\n                <select className=\"py-3 px-4 pe-9 block w-full border border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none\"\n                    value={selectedAnalysis}\n                    onChange={(e) => setSelectedAnalysis(e.target.value)}\n                >\n                    <option value=\"\">Select analysis</option>\n                    <option value=\"pr\">Page ranked</option>\n                    <option value=\"cd\">Community detection</option>\n                    <option value=\"cc\">Connected component</option>\n                    <option value=\"dc\">Degree centrality</option>\n\n                </select>\n            </div>\n            <div className=\"max-w-xs flex gap-x-2\" >\n                <button\n                    type=\"button\"\n                    onClick={handleAnalysis}\n                    disabled={!isButtonEnable || !isReadyToGraph}\n                    className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\">\n                    Analysis\n                </button>\n                <button\n                    type=\"button\"\n                    onClick={showAnalysisModal}\n                    disabled={!hasResult}\n                    className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\">\n                    Show result\n                </button>\n            </div>\n        </>\n    )\n}"],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAGe,SAAS;IACpB,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,IAAA,uaAAQ,EAAC;IACzD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,uaAAQ,EAAC;IACrD,MAAM,OAAO,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,SAAS,CAAC,KAAK;IACpE,MAAM,gBAAgB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,QAAQ;IAC1E,IAAI,0BAA0B,gBAAgB;IAC9C,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,uaAAQ,EAAC;IAC3C,MAAM,WAAW,IAAA,mMAAc;IAC/B,MAAM,iBAAiB,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,YAAY,CAAC,KAAK;IAEjF,IAAA,waAAS,EAAC;QACN,IAAI,SAAS,IAAI;YACb,MAAM,YAAkB,KAAK,KAAK,CAAC;YACnC,IAAI,UAAU,KAAK,CAAC,MAAM,KAAK,GAAG;gBAC9B,kBAAkB;YACtB,OAAO;gBACH,kBAAkB;YACtB;QACJ;IACJ,GAAG;QAAC;KAAK;IACT,MAAM,iBAAiB;QACnB,IAAI,CAAC,kBAAkB;YACnB,oWAAK,CAAC,KAAK,CAAC;YACZ;QACJ;QACA,wBAAwB,IAAI,CAAC;QAC7B,SAAS,IAAA,4NAAc,EAAC;QACxB,SAAS,IAAA,2NAAa,EAAC,EAAE;QACzB,MAAM,SAAe,KAAK,KAAK,CAAC;QAEhC,6DAA6D;QAC7D,MAAM,MAAM,qBAAqB;YAC7B,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;QACzB;QAEA,MAAM,WAAW,MAAM,MAAM,iBAAiB;YAC1C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,MAAM;YAAiB;QAClD;QAEA,MAAM,eAAe,MAAM,SAAS,IAAI;QACxC,IAAI,CAAC,cAAc,QAAQ;YACvB,QAAQ,IAAI,CAAC;YACb;QACJ;QACA,IAAI,kBAAkB,KAAK,KAAK,CAAC;QACjC,qBAAqB;QACrB,SAAS,IAAA,oNAAU,EAAC,KAAK,SAAS,CAAC;YAAE,OAAO,aAAa,MAAM;YAAE,OAAO,gBAAgB,KAAK;QAAC;QAC9F,aAAa;IACjB;IAEA,MAAM,oBAAoB;QACtB,IAAI,CAAC,kBAAkB;YACnB,oWAAK,CAAC,KAAK,CAAC;YACZ;QACJ;QACA,SAAS,IAAA,qOAAuB,EAAC;IACrC;IACA,qBACI;;0BACI,ocAAC;gBAAI,WAAU;0BACX,cAAA,ocAAC;oBAAO,WAAU;oBACd,OAAO;oBACP,UAAU,CAAC,IAAM,oBAAoB,EAAE,MAAM,CAAC,KAAK;;sCAEnD,ocAAC;4BAAO,OAAM;sCAAG;;;;;;sCACjB,ocAAC;4BAAO,OAAM;sCAAK;;;;;;sCACnB,ocAAC;4BAAO,OAAM;sCAAK;;;;;;sCACnB,ocAAC;4BAAO,OAAM;sCAAK;;;;;;sCACnB,ocAAC;4BAAO,OAAM;sCAAK;;;;;;;;;;;;;;;;;0BAI3B,ocAAC;gBAAI,WAAU;;kCACX,ocAAC;wBACG,MAAK;wBACL,SAAS;wBACT,UAAU,CAAC,kBAAkB,CAAC;wBAC9B,WAAU;kCAA6P;;;;;;kCAG3Q,ocAAC;wBACG,MAAK;wBACL,SAAS;wBACT,UAAU,CAAC;wBACX,WAAU;kCAA6P;;;;;;;;;;;;;;AAM3R","debugId":null}},
    {"offset": {"line": 3118, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/sidebar/ShortestPathAction.tsx"],"sourcesContent":["import { RootState } from '../../store/store';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { updateForward, updateBackward } from '../../store/features/actionHistorySlice';\nimport { useSelector } from 'react-redux'\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { updateNodeFilter } from '../../store/features/nodeFilterSlice';\nimport { Data } from '../../types/dataGraph'\n\nexport default function ShortestPathAction() {\n    const [startNode, setStartNode] = useState('');\n    const [endNode, setEndNode] = useState('');\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const backwardArray = useAppSelector(state => state.actionHistory.backward);\n    let changeableBackwardArray = structuredClone(backwardArray);\n    const dispatch = useAppDispatch();\n    const isButtonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const [hop, setHop] = useState('');\n    const hierarchyEnable = useAppSelector(state => state.hierarchyEnable.value)\n\n\n    useEffect(() => {\n        if (data !== '') {\n            const dataGraph: Data = JSON.parse(data)\n            if (dataGraph.nodes.length !== 0) {\n                setIsReadyToGraph(true);\n            } else {\n                setIsReadyToGraph(false);\n            }\n        }\n    }, [data]);\n    const handleShortestPath = async () => {\n        const startId = startNode;\n        const endId = endNode;\n\n        const response = await fetch('/api/filtering', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ startId, endId }),\n        });\n        \n\n        const result = await response.json();\n        //check and show error if it does not have any path between 2 nodes\n        if (!result.path || result.path.length === 0) {\n            toast.error(`No path found between \"${startId}\" and \"${endId}\"`);\n            dispatch(updateNodeFilter([]));\n            return;\n        }\n        changeableBackwardArray.push(data);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward([]));\n        result.path.forEach((record: any) => {\n            record\n        });\n        let shortestPathNodes: string[] = [];\n        result.path[0].nodeNames.forEach((nodeName: string) => {\n            shortestPathNodes.push(nodeName);\n        });\n        console.log(\"result: \", result.path[0].totalCost);\n        toast.success(`Found path from \"${startId}\" to \"${endId}\" with total cost = ${result.path[0].totalCost}`, { duration: 5000 } )\n        setHop('');\n        dispatch(updateNodeFilter(shortestPathNodes));\n    }\n\n    return (\n        <>\n            <div className='max-w-xs flex gap-x-2' >\n                <input type=\"text\" value={startNode} onChange={(e) => setStartNode(e.target.value)} placeholder=\"Start node ID\" className=\"border p-2 w-full rounded\" />\n                <input type=\"text\" value={endNode} onChange={e => setEndNode(e.target.value)} placeholder=\"End node ID\" className=\"border p-2 w-full rounded\" />\n            </div>\n            <div className='flex flex-col gap-y-2' >\n                <button type=\"button\" onClick={handleShortestPath} disabled={!isButtonEnable || !isReadyToGraph || hierarchyEnable} className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\">\n                    Find shortest path\n                </button>\n            </div>\n        </>\n    )\n}"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGe,SAAS;IACpB,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,uaAAQ,EAAC;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,uaAAQ,EAAC;IACvC,MAAM,OAAO,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,SAAS,CAAC,KAAK;IACpE,MAAM,gBAAgB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,QAAQ;IAC1E,IAAI,0BAA0B,gBAAgB;IAC9C,MAAM,WAAW,IAAA,mMAAc;IAC/B,MAAM,iBAAiB,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,YAAY,CAAC,KAAK;IACjF,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,uaAAQ,EAAC;IACrD,MAAM,CAAC,KAAK,OAAO,GAAG,IAAA,uaAAQ,EAAC;IAC/B,MAAM,kBAAkB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,eAAe,CAAC,KAAK;IAG3E,IAAA,waAAS,EAAC;QACN,IAAI,SAAS,IAAI;YACb,MAAM,YAAkB,KAAK,KAAK,CAAC;YACnC,IAAI,UAAU,KAAK,CAAC,MAAM,KAAK,GAAG;gBAC9B,kBAAkB;YACtB,OAAO;gBACH,kBAAkB;YACtB;QACJ;IACJ,GAAG;QAAC;KAAK;IACT,MAAM,qBAAqB;QACvB,MAAM,UAAU;QAChB,MAAM,QAAQ;QAEd,MAAM,WAAW,MAAM,MAAM,kBAAkB;YAC3C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAS;YAAM;QAC1C;QAGA,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,mEAAmE;QACnE,IAAI,CAAC,OAAO,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,GAAG;YAC1C,oWAAK,CAAC,KAAK,CAAC,CAAC,uBAAuB,EAAE,QAAQ,OAAO,EAAE,MAAM,CAAC,CAAC;YAC/D,SAAS,IAAA,2NAAgB,EAAC,EAAE;YAC5B;QACJ;QACA,wBAAwB,IAAI,CAAC;QAC7B,SAAS,IAAA,4NAAc,EAAC;QACxB,SAAS,IAAA,2NAAa,EAAC,EAAE;QACzB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;YACjB;QACJ;QACA,IAAI,oBAA8B,EAAE;QACpC,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC9B,kBAAkB,IAAI,CAAC;QAC3B;QACA,QAAQ,GAAG,CAAC,YAAY,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS;QAChD,oWAAK,CAAC,OAAO,CAAC,CAAC,iBAAiB,EAAE,QAAQ,MAAM,EAAE,MAAM,oBAAoB,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE;YAAE,UAAU;QAAK;QAC3H,OAAO;QACP,SAAS,IAAA,2NAAgB,EAAC;IAC9B;IAEA,qBACI;;0BACI,ocAAC;gBAAI,WAAU;;kCACX,ocAAC;wBAAM,MAAK;wBAAO,OAAO;wBAAW,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;wBAAG,aAAY;wBAAgB,WAAU;;;;;;kCAC1H,ocAAC;wBAAM,MAAK;wBAAO,OAAO;wBAAS,UAAU,CAAA,IAAK,WAAW,EAAE,MAAM,CAAC,KAAK;wBAAG,aAAY;wBAAc,WAAU;;;;;;;;;;;;0BAEtH,ocAAC;gBAAI,WAAU;0BACX,cAAA,ocAAC;oBAAO,MAAK;oBAAS,SAAS;oBAAoB,UAAU,CAAC,kBAAkB,CAAC,kBAAkB;oBAAiB,WAAU;8BAA6P;;;;;;;;;;;;;AAM3Y","debugId":null}},
    {"offset": {"line": 3254, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/sidebar/NeighborsAction.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useSelector } from 'react-redux';\nimport { updateNodeFilter } from '../../store/features/nodeFilterSlice';\nimport { RootState } from '../../store/store';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { updateBackward, updateForward } from '../../store/features/actionHistorySlice';\nimport { Data } from '../../types/dataGraph';\n\nexport default function NeighborsAction() {\n    const backwardArray = useAppSelector(state => state.actionHistory.backward);\n    let changeableBackwardArray = structuredClone(backwardArray); \n    const [hop, setHop] = useState('');\n    const [neighborsNode, setNeighborsNode] = useState('');\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const dispatch = useAppDispatch();\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const isButtonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n\n    useEffect(() => {\n            if (data !== '') {\n                const dataGraph: Data = JSON.parse(data)\n                if (dataGraph.nodes.length !== 0) {\n                    setIsReadyToGraph(true);\n                } else {\n                    setIsReadyToGraph(false);\n                }\n            }\n        }, [data]);\n\n    const handleNeighbors = async () => {\n        if (!neighborsNode || !hop) {\n            toast.error(`You need to enter node label and hop count\"`);\n            return;\n        }\n        changeableBackwardArray.push(data);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward([]));\n\n        const hopNum = Number(hop);\n        if (hopNum < 1 || hopNum > 5) {\n            toast.error(\"Please enter hop in range (1-5)\");\n            return;\n        }\n\n        const response = await fetch('/api/neighbors', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ neighborsNodeId: neighborsNode, hopID: hopNum }),\n        });\n\n        const result = await response.json();\n\n        if (!result.nodes || result.nodes.length === 0) {\n            toast.error(\"No neighbors found\");\n            return;\n        }\n        \n        const neighborsNodes = result.nodes.map((n: any) => n.label);\n        dispatch(updateNodeFilter(neighborsNodes));\n    };\n\n    return (\n        <>\n            <div className='max-w-xs flex gap-x-2' >\n                <input type=\"text\" value={neighborsNode} onChange={(e) => setNeighborsNode(e.target.value)} placeholder=\"Node ID\" className=\"border p-2 w-full rounded\" />\n                <input type=\"text\" value={hop} onChange={e => setHop(e.target.value)} placeholder=\"Hop (max 5)\" className=\"border p-2 w-full rounded\" />\n            </div>\n            <div className='flex flex-col gap-y-2' >\n                <button type=\"button\" onClick={handleNeighbors} disabled={!isButtonEnable || !isReadyToGraph} className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\">\n                    Find neighbors\n                </button>\n            </div>\n        </>\n    );\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AAGe,SAAS;IACpB,MAAM,gBAAgB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,QAAQ;IAC1E,IAAI,0BAA0B,gBAAgB;IAC9C,MAAM,CAAC,KAAK,OAAO,GAAG,IAAA,uaAAQ,EAAC;IAC/B,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,uaAAQ,EAAC;IACnD,MAAM,OAAO,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,SAAS,CAAC,KAAK;IACpE,MAAM,WAAW,IAAA,mMAAc;IAC/B,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,uaAAQ,EAAC;IACrD,MAAM,iBAAiB,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,YAAY,CAAC,KAAK;IAEjF,IAAA,waAAS,EAAC;QACF,IAAI,SAAS,IAAI;YACb,MAAM,YAAkB,KAAK,KAAK,CAAC;YACnC,IAAI,UAAU,KAAK,CAAC,MAAM,KAAK,GAAG;gBAC9B,kBAAkB;YACtB,OAAO;gBACH,kBAAkB;YACtB;QACJ;IACJ,GAAG;QAAC;KAAK;IAEb,MAAM,kBAAkB;QACpB,IAAI,CAAC,iBAAiB,CAAC,KAAK;YACxB,oWAAK,CAAC,KAAK,CAAC,CAAC,2CAA2C,CAAC;YACzD;QACJ;QACA,wBAAwB,IAAI,CAAC;QAC7B,SAAS,IAAA,4NAAc,EAAC;QACxB,SAAS,IAAA,2NAAa,EAAC,EAAE;QAEzB,MAAM,SAAS,OAAO;QACtB,IAAI,SAAS,KAAK,SAAS,GAAG;YAC1B,oWAAK,CAAC,KAAK,CAAC;YACZ;QACJ;QAEA,MAAM,WAAW,MAAM,MAAM,kBAAkB;YAC3C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,iBAAiB;gBAAe,OAAO;YAAO;QACzE;QAEA,MAAM,SAAS,MAAM,SAAS,IAAI;QAElC,IAAI,CAAC,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,GAAG;YAC5C,oWAAK,CAAC,KAAK,CAAC;YACZ;QACJ;QAEA,MAAM,iBAAiB,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAW,EAAE,KAAK;QAC3D,SAAS,IAAA,2NAAgB,EAAC;IAC9B;IAEA,qBACI;;0BACI,ocAAC;gBAAI,WAAU;;kCACX,ocAAC;wBAAM,MAAK;wBAAO,OAAO;wBAAe,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;wBAAG,aAAY;wBAAU,WAAU;;;;;;kCAC5H,ocAAC;wBAAM,MAAK;wBAAO,OAAO;wBAAK,UAAU,CAAA,IAAK,OAAO,EAAE,MAAM,CAAC,KAAK;wBAAG,aAAY;wBAAc,WAAU;;;;;;;;;;;;0BAE9G,ocAAC;gBAAI,WAAU;0BACX,cAAA,ocAAC;oBAAO,MAAK;oBAAS,SAAS;oBAAiB,UAAU,CAAC,kBAAkB,CAAC;oBAAgB,WAAU;8BAA6P;;;;;;;;;;;;;AAMrX","debugId":null}},
    {"offset": {"line": 3382, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/sidebar/SubstractAction.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { updateBackward, updateForward } from '../../store/features/actionHistorySlice';\nimport { Data } from '../../types/dataGraph';\nimport { updateData } from '../../store/features/graphDataSlice';\nimport { toast } from 'react-hot-toast';\n\n\nexport default function SubstractAction() {\n    const [selectedNodes, setSelectedNodes] = useState<string[]>([]);\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const backwardArray = useAppSelector(state => state.actionHistory.backward);\n    let changeableBackwardArray = structuredClone(backwardArray);\n    const dispatch = useAppDispatch();\n    const isButtonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const selectedFilterNodes = useSelector((state: RootState) => state.nodeFilter.value);\n    const dataObject = data ? JSON.parse(data) as Data : { nodes: [], links: [] };\n    const hierarchyEnable = useAppSelector(state => state.hierarchyEnable.value)\n\n    useEffect(() => {\n        if (data !== '') {\n            const dataGraph: Data = JSON.parse(data)\n            if (dataGraph.nodes.length !== 0) {\n                setIsReadyToGraph(true);\n            } else {\n                setIsReadyToGraph(false);\n            }\n        }\n    }, [data]);\n    const handleSubGraph = () => {\n        if (selectedNodes.length === 0 && selectedFilterNodes.length === 0) {\n            toast.error(\"No nodes selected to subtract\", { duration: 3000 });\n        return;\n    }\n        changeableBackwardArray.push(data);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward([]));\n        if (selectedFilterNodes.length !== 0 && selectedNodes.length === 0) {\n            const filteredNodes = dataObject.nodes.filter(node => selectedFilterNodes.includes(node.label));\n            const filteredNodeIds = filteredNodes.map(node => node.id);\n            const filteredLinks = dataObject.links.filter(link =>\n                (filteredNodeIds.includes(link.source as string) && filteredNodeIds.includes(link.target as string))\n            );\n            const subGraph = { nodes: filteredNodes, links: filteredLinks };\n            dispatch(updateData(JSON.stringify(subGraph)));\n        } else if (selectedNodes.length !== 0) {\n            const filteredNodes = dataObject.nodes.filter(node => selectedNodes.includes(node.id));\n            const filteredNodeIds = filteredNodes.map(node => node.id);\n            const filteredLinks = dataObject.links.filter(link =>\n                (filteredNodeIds.includes(link.source as string) && filteredNodeIds.includes(link.target as string))\n            );\n            const subGraph = { nodes: filteredNodes, links: filteredLinks };\n            dispatch(updateData(JSON.stringify(subGraph)));\n        }\n    }\n\n    return (\n        <>\n            <div>\n                <div className=\"flex flex-col gap-y-2\">\n                    <label className=\"font-medium mb-1\">Select nodes</label>\n                        <div className=\"border border-gray-200 rounded-lg overflow-y-auto\" style={{ maxHeight: '6rem' }}>\n                            {(() => {\n                            try {\n                                const parsed: Data = JSON.parse(data);\n                                if (!parsed.nodes.length) return <p className=\"text-gray-500 p-2\">No nodes available</p>;\n\n                                return parsed.nodes.map(node => (\n                                <label key={node.id} className=\"flex items-center gap-x-2 px-2 py-1 hover:bg-gray-50 cursor-pointer\">\n                                    <input\n                                    type=\"checkbox\"\n                                    value={node.id}\n                                    checked={selectedNodes.includes(node.id)}\n                                    onChange={e => {\n                                        const val = e.target.value;\n                                        if (e.target.checked) {\n                                        setSelectedNodes([...selectedNodes, val]);\n                                        } else {\n                                        setSelectedNodes(selectedNodes.filter(id => id !== val));\n                                        }\n                                    }}\n                                    className=\"form-checkbox h-4 w-4 text-blue-600\"\n                                    disabled={hierarchyEnable}\n                                    />\n                                    <span className=\"truncate\">{node.label}</span>\n                                </label>\n                                ));\n                            } catch {\n                                return <p className=\"text-gray-500 p-2\">Invalid graph data</p>;\n                            }\n                            })()}\n                        </div>\n                </div>\n            </div>\n            <div className='flex flex-col gap-y-2' >\n                <button type=\"button\" onClick={handleSubGraph} disabled={!isButtonEnable || !isReadyToGraph } className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\">\n                    Subtract Graph\n                </button>\n            </div>\n        </>\n    );\n}   "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3577, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/sidebar/SubstractParentAction.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useSelector } from 'react-redux';\nimport { updateNodeFilter } from '../../store/features/nodeFilterSlice';\nimport { RootState } from '../../store/store';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { updateBackward, updateForward } from '../../store/features/actionHistorySlice';\nimport { Data } from '../../types/dataGraph';\nimport { updateData } from '../../store/features/graphDataSlice';\n\n\nexport default function SubstractParentAction() {\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const dispatch = useAppDispatch()\n    const backwardArray = useAppSelector(state => state.actionHistory.backward);\n    let changeableBackwardArray = structuredClone(backwardArray);\n    const isButtonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const [selectedParent, setSelectedParent] = useState('');\n    const hierarchyEnable = useSelector((state: RootState) => state.hierarchyEnable.value);\n\n    useEffect(() => {\n        if (data !== '') {\n            const dataGraph: Data = JSON.parse(data)\n            if (dataGraph.nodes.length !== 0) {\n                setIsReadyToGraph(true);\n            } else {\n                setIsReadyToGraph(false);\n            }\n        }\n    }, [data]);\n    const getSubtreeNodes = (parentId: string, nodes: Data['nodes']): string[] => {\n        const children = nodes.filter(n => n.parentID === parentId);\n\n        let allChildrenIds: string[] = [];\n\n        for (const child of children) {\n            allChildrenIds.push(child.id);\n            allChildrenIds.push(...getSubtreeNodes(child.id, nodes));\n        }\n\n        console.log(`Parent ${parentId} children →`, allChildrenIds);\n        return allChildrenIds;\n    };\n\n    const handleFindChildren = (parentId: string) => {\n        if (!parentId) {\n            toast.error(\"Please enter a parent node ID\");\n            return;\n        }\n\n        const dataObject: Data = data ? JSON.parse(data) : { nodes: [], links: [] };\n\n        // Find all children\n        const subtreeNodeIds = [parentId, ...getSubtreeNodes(parentId, dataObject.nodes)];\n\n        if (subtreeNodeIds.length <= 1) {\n            toast.error(\"No children found for this node\");\n            return;\n        }\n\n        const filteredNodes = dataObject.nodes.filter(n => subtreeNodeIds.includes(n.id));\n        const labels = filteredNodes.map(n => n.label);\n        dispatch(updateNodeFilter(labels));\n\n        toast.success(`Found ${filteredNodes.length - 1} children for node ${parentId}`);\n    };\n\n    const handleSubGraphByParent = (parentId: string) => {\n        changeableBackwardArray.push(data);\n        dispatch(updateBackward(changeableBackwardArray));\n        dispatch(updateForward([]));\n        if (!parentId) {\n            toast.error(\"Please provide a valid parent ID\");\n            return;\n        }\n        const dataObject: Data = data ? JSON.parse(data) : { nodes: [], links: [] };\n        const selectedNode = dataObject.nodes.find(n => n.id === parentId);\n        if (!selectedNode) {\n            toast.error(\"Node not found\");\n            return;\n        }\n        if (hierarchyEnable) {\n            // If the node have parent ID => alert and no render more\n            if (selectedNode.parentID) {\n                toast.error(\n                    `Node \"${selectedNode.label}\" is not a root node. Please change its parentID to null (make it a root) before creating subgraph.`,\n                    { duration: 7000 }\n                );\n                return;\n            }\n        }\n        const subtreeNodeIds = [parentId, ...getSubtreeNodes(parentId, dataObject.nodes)];\n        const filteredNodes = dataObject.nodes.filter(n => subtreeNodeIds.includes(n.id));\n        const filteredLinks = dataObject.links.filter(\n            l => subtreeNodeIds.includes(l.source as string) && subtreeNodeIds.includes(l.target as string)\n        );\n\n        const subGraph = { nodes: filteredNodes, links: filteredLinks };\n        dispatch(updateData(JSON.stringify(subGraph)));\n\n        const labels = filteredNodes.map(n => n.label);\n        dispatch(updateNodeFilter(labels));\n\n        toast.success(`Subgraph created successfully for root \"${selectedNode.label}\"`);\n    };\n\n    return (\n        <>\n            <div className=\"flex flex-col gap-y-2\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Parent Node ID\"\n                    value={selectedParent}\n                    onChange={(e) => setSelectedParent(e.target.value)}\n                    className=\"border p-2 w-full rounded\"\n                />\n\n                <button\n                    onClick={() => handleFindChildren(selectedParent)}\n                    disabled={!isButtonEnable || !isReadyToGraph}\n                    className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\"\n                >\n                    Find Children\n                </button>\n\n                <button\n                    onClick={() => handleSubGraphByParent(selectedParent)}\n                    disabled={!isButtonEnable || !isReadyToGraph}\n                    className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\"\n                >\n                    Subtract Parent-Child Graph\n                </button>\n            </div>\n        </>\n    )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3739, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/sidebar/ClearAction.tsx"],"sourcesContent":["import { RootState } from '../../store/store';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { updateForward, updateBackward } from '../../store/features/actionHistorySlice';\nimport { useSelector } from 'react-redux'\nimport { updateData } from '../../store/features/graphDataSlice';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Data } from '../../types/dataGraph'\n\nexport default function ClearAction() {\n    const backwardArray = useAppSelector(state => state.actionHistory.backward);\n    let changeableBackwardArray = structuredClone(backwardArray);\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const dispatch = useAppDispatch();\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const isButtonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n    const [isClearModalOpen, setIsClearModalOpen] = useState(false);\n\n    useEffect(() => {\n        if (data !== '') {\n            const dataGraph: Data = JSON.parse(data)\n            if (dataGraph.nodes.length !== 0) {\n                setIsReadyToGraph(true);\n            } else {\n                setIsReadyToGraph(false);\n            }\n        }\n    }, [data]);\n\n    const handleClear = async () => {\n        try {\n            if (data === '') {\n                changeableBackwardArray.push(JSON.stringify({ nodes: [], links: [] }));\n            } else {\n                changeableBackwardArray.push(data);\n            }\n            dispatch(updateBackward(changeableBackwardArray));\n            dispatch(updateForward([]));\n\n            const parsed: Data = JSON.parse(data);\n\n            const response = await fetch(\"/api/clear\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(parsed),\n            });\n\n            if (!response.ok) throw new Error(\"Clear failed on server\");\n\n            await response.json();\n            dispatch(updateData(JSON.stringify({ nodes: [], links: [] })));\n            setIsClearModalOpen(false);\n            toast.success(\"Graph cleared successfully\", { duration: 4000 });\n        } catch (err) {\n            console.error(err);\n            toast.error(\"Clear failed\", { duration: 5000 });\n        }\n    };\n    return (\n        <>\n            <button onClick={() => setIsClearModalOpen(true)} disabled={!isButtonEnable || !isReadyToGraph} className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\">Clear</button>\n            {isClearModalOpen && (\n                <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-40\">\n                    <div className=\"bg-white p-6 rounded shadow-lg\">\n                        <h3>Confirm Clear</h3>\n                        <p>Do you really want to clear the graph? It will also be cleared from the database.</p>\n                        <div className=\"flex justify-end gap-x-2\">\n                            <button\n                                onClick={() => setIsClearModalOpen(false)}\n                                className=\"px-4 py-2 bg-gray-300 rounded hover:bg-gray-400\"\n                            >\n                                Cancel\n                            </button>\n                            <button\n                                onClick={handleClear}\n                                className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n                            >\n                                Confirm\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAGe,SAAS;IACpB,MAAM,gBAAgB,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,QAAQ;IAC1E,IAAI,0BAA0B,gBAAgB;IAC9C,MAAM,OAAO,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,SAAS,CAAC,KAAK;IACpE,MAAM,WAAW,IAAA,mMAAc;IAC/B,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,uaAAQ,EAAC;IACrD,MAAM,iBAAiB,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,YAAY,CAAC,KAAK;IACjF,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,IAAA,uaAAQ,EAAC;IAEzD,IAAA,waAAS,EAAC;QACN,IAAI,SAAS,IAAI;YACb,MAAM,YAAkB,KAAK,KAAK,CAAC;YACnC,IAAI,UAAU,KAAK,CAAC,MAAM,KAAK,GAAG;gBAC9B,kBAAkB;YACtB,OAAO;gBACH,kBAAkB;YACtB;QACJ;IACJ,GAAG;QAAC;KAAK;IAET,MAAM,cAAc;QAChB,IAAI;YACA,IAAI,SAAS,IAAI;gBACb,wBAAwB,IAAI,CAAC,KAAK,SAAS,CAAC;oBAAE,OAAO,EAAE;oBAAE,OAAO,EAAE;gBAAC;YACvE,OAAO;gBACH,wBAAwB,IAAI,CAAC;YACjC;YACA,SAAS,IAAA,4NAAc,EAAC;YACxB,SAAS,IAAA,2NAAa,EAAC,EAAE;YAEzB,MAAM,SAAe,KAAK,KAAK,CAAC;YAEhC,MAAM,WAAW,MAAM,MAAM,cAAc;gBACvC,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;YACzB;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAElC,MAAM,SAAS,IAAI;YACnB,SAAS,IAAA,oNAAU,EAAC,KAAK,SAAS,CAAC;gBAAE,OAAO,EAAE;gBAAE,OAAO,EAAE;YAAC;YAC1D,oBAAoB;YACpB,oWAAK,CAAC,OAAO,CAAC,8BAA8B;gBAAE,UAAU;YAAK;QACjE,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;YACd,oWAAK,CAAC,KAAK,CAAC,gBAAgB;gBAAE,UAAU;YAAK;QACjD;IACJ;IACA,qBACI;;0BACI,ocAAC;gBAAO,SAAS,IAAM,oBAAoB;gBAAO,UAAU,CAAC,kBAAkB,CAAC;gBAAgB,WAAU;0BAA6P;;;;;;YACtW,kCACG,ocAAC;gBAAI,WAAU;0BACX,cAAA,ocAAC;oBAAI,WAAU;;sCACX,ocAAC;sCAAG;;;;;;sCACJ,ocAAC;sCAAE;;;;;;sCACH,ocAAC;4BAAI,WAAU;;8CACX,ocAAC;oCACG,SAAS,IAAM,oBAAoB;oCACnC,WAAU;8CACb;;;;;;8CAGD,ocAAC;oCACG,SAAS;oCACT,WAAU;8CACb;;;;;;;;;;;;;;;;;;;;;;;;;AAS7B","debugId":null}},
    {"offset": {"line": 3890, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/sidebar/SaveAction.tsx"],"sourcesContent":["import { RootState } from '../../store/store';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport { useSelector } from 'react-redux'\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Data } from '../..//types/dataGraph'\n\nexport default function Save() {\n    const data = useSelector((state: RootState) => state.graphData.value);\n    const dispatch = useAppDispatch();\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const isButtonEnable = useSelector((state: RootState) => state.buttonEnable.value);\n\n    useEffect(() => {\n            if (data !== '') {\n                const dataGraph: Data = JSON.parse(data)\n                if (dataGraph.nodes.length !== 0) {\n                    setIsReadyToGraph(true);\n                } else {\n                    setIsReadyToGraph(false);\n                }\n            }\n        }, [data]);\n\n    const handleSave = async () => {\n        try {\n            const parsed: Data = JSON.parse(data);\n\n            const response = await fetch('/api/import-graph', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(parsed),\n            });\n\n            if (!response.ok) {\n            const errText = await response.text();\n            throw new Error(`Server responded with ${response.status}: ${errText}`);\n            }\n\n            const result = await response.json();\n            toast.success(\"Save to database successful\");\n\n        } catch (err) {\n            console.error(\"Save failed:\", err);\n            toast.error(\"Save failed: cannot connect to Neo4j or invalid response\", { duration: 5000 });\n        }\n    };\n    return (\n        <>\n                <button type=\"button\" onClick={handleSave} disabled={!isButtonEnable || !isReadyToGraph} className=\"w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none\">\n                    Save\n                </button>\n        </>\n    )\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;;;;;;AAGe,SAAS;IACpB,MAAM,OAAO,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,SAAS,CAAC,KAAK;IACpE,MAAM,WAAW,IAAA,mMAAc;IAC/B,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,uaAAQ,EAAC;IACrD,MAAM,iBAAiB,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,YAAY,CAAC,KAAK;IAEjF,IAAA,waAAS,EAAC;QACF,IAAI,SAAS,IAAI;YACb,MAAM,YAAkB,KAAK,KAAK,CAAC;YACnC,IAAI,UAAU,KAAK,CAAC,MAAM,KAAK,GAAG;gBAC9B,kBAAkB;YACtB,OAAO;gBACH,kBAAkB;YACtB;QACJ;IACJ,GAAG;QAAC;KAAK;IAEb,MAAM,aAAa;QACf,IAAI;YACA,MAAM,SAAe,KAAK,KAAK,CAAC;YAEhC,MAAM,WAAW,MAAM,MAAM,qBAAqB;gBAClD,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;YACrB;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAClB,MAAM,UAAU,MAAM,SAAS,IAAI;gBACnC,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,SAAS;YACtE;YAEA,MAAM,SAAS,MAAM,SAAS,IAAI;YAClC,oWAAK,CAAC,OAAO,CAAC;QAElB,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,gBAAgB;YAC9B,oWAAK,CAAC,KAAK,CAAC,4DAA4D;gBAAE,UAAU;YAAK;QAC7F;IACJ;IACA,qBACI;kBACQ,cAAA,ocAAC;YAAO,MAAK;YAAS,SAAS;YAAY,UAAU,CAAC,kBAAkB,CAAC;YAAgB,WAAU;sBAA6P;;;;;;;AAKhX","debugId":null}},
    {"offset": {"line": 3962, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/SideBar.tsx"],"sourcesContent":["'use client'\n\nimport ImportButton from './buttons/ImportButton';\nimport ExportButton from './buttons/ExportButton';\nimport React, { useEffect, useState } from 'react'\nimport { Toaster } from \"react-hot-toast\";\nimport { updateButtonEnable } from '../store/features/buttonsEnableSlice';\nimport { useAppDispatch } from '../store/hooks'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../store/store'\nimport { Data } from '../types/dataGraph'\nimport cytoscape from 'cytoscape'\nimport AnalysisAction from './sidebar/AnalysisAction';\nimport ShortestPathAction from './sidebar/ShortestPathAction';\nimport NeighborsAction from './sidebar/NeighborsAction';\nimport SubstractAction from './sidebar/SubstractAction';\nimport SubstractParentAction from './sidebar/SubstractParentAction';\nimport ClearAction from './sidebar/ClearAction';\nimport SaveAction from './sidebar/SaveAction';\n\n\ntype SidebarProps = {\n    onGraphTypeSet: (args: string) => void;\n    cy: cytoscape.Core | null;\n};\n\nconst SideBar = ({ onGraphTypeSet, cy }: SidebarProps) => {\n    const [isButtonEnable, setIsButtonEnable] = useState(false);\n    const [isReadyToGraph, setIsReadyToGraph] = useState(false);\n    const dispatch = useAppDispatch()\n    const data = useSelector((state: RootState) => state.graphData.value);\n\n    const sendDataToParent = (graphType: string) => {\n        setIsButtonEnable(true)\n        onGraphTypeSet(graphType);\n        dispatch(updateButtonEnable(true))\n    };\n\n    useEffect(() => {\n        if (data !== '') {\n            const dataGraph: Data = JSON.parse(data)\n            if (dataGraph.nodes.length !== 0) {\n                setIsReadyToGraph(true);\n            } else {\n                setIsReadyToGraph(false);\n            }\n        }\n    }, [data]);\n\n    return <>\n        <div className=\"max-w-xs flex flex-col rounded-lg shadow-2xs gap-y-2\">\n            <Toaster position=\"top-right\" />\n            <div>\n                <select onChange={e => sendDataToParent(e.target.value)} className=\"py-3 px-4 pe-9 block w-full border border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none\">\n                    <option value=\"\">Select graph type</option>\n                    <option value=\"fd\">Force directed</option>\n                    <option value=\"h\">Hierarchical</option>\n                </select>\n            </div>\n            <div >\n                <ImportButton isButtonEnable={isButtonEnable} setIsReadyToGraph={setIsReadyToGraph} />\n            </div>\n            <div>\n                <ExportButton isButtonEnable={isButtonEnable} isReadyToGraph={isReadyToGraph} cy={cy} />\n            </div>\n            <div className=\"max-w-xs flex gap-x-2\" >\n                <SaveAction />\n                <ClearAction />\n            </div>\n            <AnalysisAction />\n            <ShortestPathAction />\n            <NeighborsAction />\n            <SubstractAction />\n            <SubstractParentAction />\n            \n        </div>\n    </>\n}\n\nexport default SideBar;"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;;;;;;;;;;AA0BA,MAAM,UAAU,CAAC,EAAE,cAAc,EAAE,EAAE,EAAgB;IACjD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,uaAAQ,EAAC;IACrD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,uaAAQ,EAAC;IACrD,MAAM,WAAW,IAAA,mMAAc;IAC/B,MAAM,OAAO,IAAA,uWAAW,EAAC,CAAC,QAAqB,MAAM,SAAS,CAAC,KAAK;IAEpE,MAAM,mBAAmB,CAAC;QACtB,kBAAkB;QAClB,eAAe;QACf,SAAS,IAAA,gOAAkB,EAAC;IAChC;IAEA,IAAA,waAAS,EAAC;QACN,IAAI,SAAS,IAAI;YACb,MAAM,YAAkB,KAAK,KAAK,CAAC;YACnC,IAAI,UAAU,KAAK,CAAC,MAAM,KAAK,GAAG;gBAC9B,kBAAkB;YACtB,OAAO;gBACH,kBAAkB;YACtB;QACJ;IACJ,GAAG;QAAC;KAAK;IAET,qBAAO;kBACH,cAAA,ocAAC;YAAI,WAAU;;8BACX,ocAAC,sWAAO;oBAAC,UAAS;;;;;;8BAClB,ocAAC;8BACG,cAAA,ocAAC;wBAAO,UAAU,CAAA,IAAK,iBAAiB,EAAE,MAAM,CAAC,KAAK;wBAAG,WAAU;;0CAC/D,ocAAC;gCAAO,OAAM;0CAAG;;;;;;0CACjB,ocAAC;gCAAO,OAAM;0CAAK;;;;;;0CACnB,ocAAC;gCAAO,OAAM;0CAAI;;;;;;;;;;;;;;;;;8BAG1B,ocAAC;8BACG,cAAA,ocAAC,oNAAY;wBAAC,gBAAgB;wBAAgB,mBAAmB;;;;;;;;;;;8BAErE,ocAAC;8BACG,cAAA,ocAAC,oNAAY;wBAAC,gBAAgB;wBAAgB,gBAAgB;wBAAgB,IAAI;;;;;;;;;;;8BAEtF,ocAAC;oBAAI,WAAU;;sCACX,ocAAC,kNAAU;;;;;sCACX,ocAAC,mNAAW;;;;;;;;;;;8BAEhB,ocAAC,sNAAc;;;;;8BACf,ocAAC,0NAAkB;;;;;8BACnB,ocAAC,uNAAe;;;;;8BAChB,ocAAC,uNAAe;;;;;8BAChB,ocAAC,6NAAqB;;;;;;;;;;;;AAIlC;uCAEe","debugId":null}},
    {"offset": {"line": 4156, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/Darkmode.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function DarkModeToggle() {\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n      \n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  return (\n    <div>\n      <label htmlFor=\"dark-mode-toggle\" className=\"relative inline-block w-11 h-6 cursor-pointer\">\n        <input\n          type=\"checkbox\"\n          id=\"dark-mode-toggle\"\n          className=\"peer sr-only\"\n          checked={darkMode}\n          onChange={() => setDarkMode(!darkMode)}\n        />\n        <span className=\"absolute inset-0 bg-gray-200 rounded-full transition-colors duration-200 ease-in-out peer-checked:bg-blue-600\"></span>\n        <span className=\"absolute top-1/2 left-0.5 -translate-y-1/2 w-5 h-5 bg-white rounded-full shadow-xs transition-transform duration-200 ease-in-out peer-checked:translate-x-full\"></span>\n      </label>\n      <label htmlFor=\"dark-mode-toggle\" className=\"text-sm text-gray-500 ml-2\">Dark mode</label>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;;;AAEe,SAAS;IACtB,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,uaAAQ,EAAC;IAEzC,IAAA,waAAS,EAAC;QACR,IAAI,UAAU;YACZ,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;QAEzC,OAAO;YACL,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5C;IACF,GAAG;QAAC;KAAS;IAEb,qBACE,ocAAC;;0BACC,ocAAC;gBAAM,SAAQ;gBAAmB,WAAU;;kCAC1C,ocAAC;wBACC,MAAK;wBACL,IAAG;wBACH,WAAU;wBACV,SAAS;wBACT,UAAU,IAAM,YAAY,CAAC;;;;;;kCAE/B,ocAAC;wBAAK,WAAU;;;;;;kCAChB,ocAAC;wBAAK,WAAU;;;;;;;;;;;;0BAElB,ocAAC;gBAAM,SAAQ;gBAAmB,WAAU;0BAA6B;;;;;;;;;;;;AAG/E","debugId":null}},
    {"offset": {"line": 4232, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/components/ActionMenu.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../store/hooks'\nimport { updateBackward, updateForward } from '../store/features/actionHistorySlice'\nimport { updateData } from '../store/features/graphDataSlice';\nimport DarkModeToggle from './Darkmode'\n\ntype Action = {\n    name: string;\n    modal: React.ReactNode;\n    enabled: boolean;\n    onClick: () => void;\n};\n\nconst ActionMenu = () => {\n    // state for modal\n    const [openModals, setOpenModals] = useState({\n        addNode: false,\n        addEdge: false,\n        removeNode: false,\n        removeEdge: false,\n        editNode: false,\n        editEdge: false,\n        edit: false,\n    });\n\n    const dispatch = useAppDispatch()\n\n    const [hasUndo, setHasUndo] = useState(false);\n    const [hasRedo, setHasRedo] = useState(false);\n\n    const forwardData = useAppSelector(state => state.actionHistory.forward)\n    const backwardData = useAppSelector(state => state.actionHistory.backward)\n    const graphData = useAppSelector(state => state.graphData.value)\n    let changeableBackwardArray = structuredClone(backwardData);\n    const forwardArray = useAppSelector(state => state.actionHistory.forward)\n    let changeableForwardArray = structuredClone(forwardArray);\n\n    useEffect(() => {\n        if (forwardData.length !== 0) {\n            setHasRedo(true)\n        } else {\n            setHasRedo(false)\n        }\n        if (backwardData.length !== 0) {\n            setHasUndo(true)\n        } else {\n            setHasUndo(false)\n        }\n    }, [forwardData, backwardData])\n\n    const handleForward = () => {\n        changeableBackwardArray.push(graphData);\n        let lastForwardData = changeableForwardArray.pop();\n        if (lastForwardData) {\n            dispatch(updateBackward(changeableBackwardArray));\n            dispatch(updateForward(changeableForwardArray));\n            dispatch(updateData(lastForwardData));\n        }\n    }\n\n    const handleBackward = () => {\n        changeableForwardArray.push(graphData);\n\n        let lastData = changeableBackwardArray.pop();\n        if (lastData) {\n            dispatch(updateBackward(changeableBackwardArray));\n            dispatch(updateForward(changeableForwardArray));\n            dispatch(updateData(lastData));\n        }\n    }\n\n    const commonButtonClass =\n        'w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm \\\n    font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 \\\n    focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none';\n\n    return (\n        <>\n            <div>\n                <button type=\"button\" onClick={handleBackward} disabled={!hasUndo} className={commonButtonClass}>\n                    Undo\n                </button>\n            </div>\n            <div>\n                <button type=\"button\" onClick={handleForward} disabled={!hasRedo} className={commonButtonClass}>\n                    Redo\n                </button>\n            </div>\n            <div>\n                <DarkModeToggle></DarkModeToggle>\n            </div>\n        </>\n    );\n};\n\nexport default ActionMenu;\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AANA;;;;;;;AAeA,MAAM,aAAa;IACf,kBAAkB;IAClB,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,uaAAQ,EAAC;QACzC,SAAS;QACT,SAAS;QACT,YAAY;QACZ,YAAY;QACZ,UAAU;QACV,UAAU;QACV,MAAM;IACV;IAEA,MAAM,WAAW,IAAA,mMAAc;IAE/B,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,uaAAQ,EAAC;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,uaAAQ,EAAC;IAEvC,MAAM,cAAc,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,OAAO;IACvE,MAAM,eAAe,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,QAAQ;IACzE,MAAM,YAAY,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,SAAS,CAAC,KAAK;IAC/D,IAAI,0BAA0B,gBAAgB;IAC9C,MAAM,eAAe,IAAA,mMAAc,EAAC,CAAA,QAAS,MAAM,aAAa,CAAC,OAAO;IACxE,IAAI,yBAAyB,gBAAgB;IAE7C,IAAA,waAAS,EAAC;QACN,IAAI,YAAY,MAAM,KAAK,GAAG;YAC1B,WAAW;QACf,OAAO;YACH,WAAW;QACf;QACA,IAAI,aAAa,MAAM,KAAK,GAAG;YAC3B,WAAW;QACf,OAAO;YACH,WAAW;QACf;IACJ,GAAG;QAAC;QAAa;KAAa;IAE9B,MAAM,gBAAgB;QAClB,wBAAwB,IAAI,CAAC;QAC7B,IAAI,kBAAkB,uBAAuB,GAAG;QAChD,IAAI,iBAAiB;YACjB,SAAS,IAAA,4NAAc,EAAC;YACxB,SAAS,IAAA,2NAAa,EAAC;YACvB,SAAS,IAAA,oNAAU,EAAC;QACxB;IACJ;IAEA,MAAM,iBAAiB;QACnB,uBAAuB,IAAI,CAAC;QAE5B,IAAI,WAAW,wBAAwB,GAAG;QAC1C,IAAI,UAAU;YACV,SAAS,IAAA,4NAAc,EAAC;YACxB,SAAS,IAAA,2NAAa,EAAC;YACvB,SAAS,IAAA,oNAAU,EAAC;QACxB;IACJ;IAEA,MAAM,oBACF;;;IAIJ,qBACI;;0BACI,ocAAC;0BACG,cAAA,ocAAC;oBAAO,MAAK;oBAAS,SAAS;oBAAgB,UAAU,CAAC;oBAAS,WAAW;8BAAmB;;;;;;;;;;;0BAIrG,ocAAC;0BACG,cAAA,ocAAC;oBAAO,MAAK;oBAAS,SAAS;oBAAe,UAAU,CAAC;oBAAS,WAAW;8BAAmB;;;;;;;;;;;0BAIpG,ocAAC;0BACG,cAAA,ocAAC,qMAAc;;;;;;;;;;;;AAI/B;uCAEe","debugId":null}},
    {"offset": {"line": 4360, "column": 0}, "map": {"version":3,"sources":["file:///Users/chuhathanh/Workspaces/Thanhs-Workspaces/GraphEditor/src/app/page.tsx"],"sourcesContent":["'use client'\nimport MyGraph from './components/graph'\nimport Nav from './components/Nav'\nimport { useState } from 'react'\nimport SideBar from './components/SideBar'\nimport ActionMenu from './components/ActionMenu'\nimport cytoscape from 'cytoscape'\n\nexport default function Home() {\n    const [graphType, setGraphType] = useState('');\n    const [cyInstance, setCyInstance] = useState<cytoscape.Core | null>(null)\n\n    const handleGraphTypeFromChild = (graphType: string) => {\n        setGraphType(graphType);\n    };\n\n    const myStyle = {\n        border: \"black\",\n        borderStyle: \"solid\",\n        borderWidth: \"thin\",\n        borderRadius: \"8px\",\n    };\n    const anotherStyle = {\n        marginLeft: \"80px\",\n        marginRight: \"80px\",\n        marginTop: \"20px\",\n        marginBottom: \"20px\",\n    };\n    \n\n    return (\n        <>\n            <Nav />\n            <div className=\"grid grid-cols-5 gap-2\">\n                <div className=\"col-span-5\"></div>\n                <div className=\"col-span-5\"></div>\n                <div className=\"grid grid-cols-5 gap-2 col-span-5\" style={anotherStyle}>\n                    <div className=\"col-span-4 \">\n                        <div className=\"col-span-4 flex justify-center items-center\" style={{ ...myStyle, height: '80vh' }}>\n                            <MyGraph type={graphType} onCyReadyAction={setCyInstance} />\n                        </div>\n                        <div className=\"flex justify-center gap-2 col-span-10 items-center w-full my-6\">\n                            <ActionMenu />\n                        </div>\n                    </div>\n                    <div className=\"col-span-1 row-span-3\">\n                        <SideBar onGraphTypeSet={handleGraphTypeFromChild}\n                            cy={cyInstance} />\n                    </div>\n\n                </div>\n\n            </div>\n        </>\n    );\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;AAQe,SAAS;IACpB,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,uaAAQ,EAAC;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,uaAAQ,EAAwB;IAEpE,MAAM,2BAA2B,CAAC;QAC9B,aAAa;IACjB;IAEA,MAAM,UAAU;QACZ,QAAQ;QACR,aAAa;QACb,aAAa;QACb,cAAc;IAClB;IACA,MAAM,eAAe;QACjB,YAAY;QACZ,aAAa;QACb,WAAW;QACX,cAAc;IAClB;IAGA,qBACI;;0BACI,ocAAC,gMAAG;;;;;0BACJ,ocAAC;gBAAI,WAAU;;kCACX,ocAAC;wBAAI,WAAU;;;;;;kCACf,ocAAC;wBAAI,WAAU;;;;;;kCACf,ocAAC;wBAAI,WAAU;wBAAoC,OAAO;;0CACtD,ocAAC;gCAAI,WAAU;;kDACX,ocAAC;wCAAI,WAAU;wCAA8C,OAAO;4CAAE,GAAG,OAAO;4CAAE,QAAQ;wCAAO;kDAC7F,cAAA,ocAAC,kMAAO;4CAAC,MAAM;4CAAW,iBAAiB;;;;;;;;;;;kDAE/C,ocAAC;wCAAI,WAAU;kDACX,cAAA,ocAAC,uMAAU;;;;;;;;;;;;;;;;0CAGnB,ocAAC;gCAAI,WAAU;0CACX,cAAA,ocAAC,oMAAO;oCAAC,gBAAgB;oCACrB,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;AAQhC","debugId":null}}]
}